import streamlit as st
import qdrant_client
from qdrant_client.models import Filter, FieldCondition, MatchValue, MatchAny
import google.generativeai as genai
from datetime import datetime, timedelta
import re
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Any, Optional, Tuple
import json
import voyageai
import psycopg2
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Configuration de la page
st.set_page_config(
    page_title="FISCALBOT 3.0 - Assistant Fiscal CGI Excellence",
    page_icon="üèÜ",
    layout="wide"
)

GEMINI_API_KEY = "AIzaSyDmG5LqJhaAthC8GrgjE9eIdHcWSNQJTmE"
VOYAGE_API_KEY = "pa-gPu9JZffTtb0O57mU8ZNtCzWBrQ7dDRy_7M_f6Cr8br"

genai.configure(api_key=GEMINI_API_KEY)
voyage_client = voyageai.Client(api_key=VOYAGE_API_KEY)
qdrant_client_main = qdrant_client.QdrantClient(host="13.39.82.37", port=6333)

# ===== CLASSE DATABASE COMPL√àTE =====
class Database:
    def __init__(self):
        self.conn = None
        self.cur = None
        self.connect()
        self.create_tables()
    
    def connect(self):
        try:
            self.conn = psycopg2.connect(
                host="aws-0-eu-west-3.pooler.supabase.com",
                port="6543",
                database="postgres",
                user="postgres.hhgbwbmfmkpzumlvwsfi",
                password="8-fJh4+&qh73uHK"
            )
            self.cur = self.conn.cursor()
            return True
        except Exception as e:
            st.error(f"Erreur de connexion √† la base de donn√©es: {str(e)}")
            return False
    
    def create_tables(self):
        try:
            self.cur.execute("""
            CREATE TABLE IF NOT EXISTS conversations (
                id SERIAL PRIMARY KEY,
                question TEXT NOT NULL,
                response TEXT NOT NULL,
                articles JSONB,
                feedback_type VARCHAR(20),
                feedback_comment TEXT,
                search_method VARCHAR(50),
                semantic_score FLOAT,
                query_complexity FLOAT,
                execution_time FLOAT,
                model_used VARCHAR(50),
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """)
            
            self.conn.commit()
            return True
        except Exception as e:
            st.error(f"Erreur lors de la cr√©ation des tables: {str(e)}")
            return False
    
    def save_conversation(self, question, response, articles, search_method=None, 
                         semantic_score=None, query_complexity=None, execution_time=None,
                         model_used=None, feedback_type=None, feedback_comment=None):
        try:
            articles_json = json.dumps(articles)
            
            self.cur.execute("""
            INSERT INTO conversations (
                question, response, articles, search_method, semantic_score, 
                query_complexity, execution_time, model_used, feedback_type, feedback_comment
            ) 
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
            """, (
                question, response, articles_json, search_method, semantic_score,
                query_complexity, execution_time, model_used, feedback_type, feedback_comment
            ))
            
            conversation_id = self.cur.fetchone()[0]
            self.conn.commit()
            return conversation_id
        except Exception as e:
            st.error(f"Erreur lors de l'enregistrement de la conversation: {str(e)}")
            return None
    
    def update_feedback(self, conversation_id, feedback_type, feedback_comment):
        try:
            self.cur.execute("""
            UPDATE conversations 
            SET feedback_type = %s, feedback_comment = %s 
            WHERE id = %s
            """, (feedback_type, feedback_comment, conversation_id))
            self.conn.commit()
            return True
        except Exception as e:
            st.error(f"Erreur lors de la mise √† jour du feedback: {str(e)}")
            return False
    
    def get_feedback_stats(self):
        try:
            if self.conn.closed or self.cur.closed:
                self.connect()
                
            self.cur.execute("""
            SELECT 
                COALESCE(feedback_type, 'sans_feedback') as type,
                COUNT(*) as count
            FROM conversations
            GROUP BY feedback_type
            """)
            
            results = self.cur.fetchall()
            return results
        except Exception as e:
            st.error(f"Erreur lors de la r√©cup√©ration des statistiques de feedback: {str(e)}")
            return []

    def is_connected(self):
        try:
            if self.conn and not self.conn.closed:
                self.cur.execute("SELECT 1")
                return True
            return False
        except:
            return False

    def get_conversation_history(self, feedback_type="all", limit=10, offset=0):
        """R√©cup√®re l'historique des conversations avec filtrage par type de feedback"""
        try:
            query = """
            SELECT 
                id,
                question,
                response,
                feedback_type,
                feedback_comment,
                timestamp
            FROM conversations
            """
            
            params = []
            
            # Ajouter la condition de filtrage si n√©cessaire
            if feedback_type != "all":
                if feedback_type is None:
                    query += " WHERE feedback_type IS NULL"
                else:
                    query += " WHERE feedback_type = %s"
                    params.append(feedback_type)
                    
            query += " ORDER BY timestamp DESC LIMIT %s OFFSET %s"
            params.extend([limit, offset])
            
            self.cur.execute(query, params)
            
            results = self.cur.fetchall()
            return results
        except Exception as e:
            st.error(f"Erreur lors de la r√©cup√©ration de l'historique: {str(e)}")
            return []
    
    def close(self):
        if self.cur:
            self.cur.close()
        if self.conn:
            self.conn.close()

# Initialiser la base de donn√©es
@st.cache_resource
def get_database():
    db = Database()
    if db.conn is None or db.cur is None or db.conn.closed:
        db.connect()
    return db

db = get_database()

# üåü Syst√®me de synonymes fiscaux int√©gr√©
class FiscalSynonymManager:
    """Gestionnaire de synonymes pour am√©liorer la recherche s√©mantique"""
    
    def __init__(self):
        # Dictionnaire de synonymes fiscaux g√©n√©riques
        self.synonyms = {
            # Produits alimentaires
            "poisson": ["produits de la p√™che", "produits maritimes", "produits de mer", 
                       "poissons frais", "poisson congel√©", "produits halieutiques"],
            "viande": ["viandes fra√Æches", "produits carn√©s", "viande bovine", "viande ovine",
                      "viande caprine", "viande de volaille", "produits d'abattoir"],
            "l√©gumes": ["produits mara√Æchers", "l√©gumes frais", "produits v√©g√©taux",
                       "l√©gumineuses", "tubercules", "produits horticoles"],
            "fruits": ["fruits frais", "produits fruitiers", "agrumes", "fruits secs"],
            "lait": ["produits laitiers", "laitage", "produits d√©riv√©s du lait"],
            
            # Termes fiscaux
            "exon√©ration": ["exon√©r√©", "exemption", "franchise", "dispense", "non assujetti"],
            "imp√¥t": ["taxe", "imposition", "contribution", "pr√©l√®vement", "redevance"],
            "soci√©t√©": ["entreprise", "compagnie", "firme", "personne morale", "entit√©"],
            "revenu": ["r√©mun√©ration", "gain", "b√©n√©fice", "profit", "recette"],
            "charge": ["d√©pense", "frais", "co√ªt", "d√©bours"],
            "plafond": ["limite", "seuil", "maximum", "montant maximal"],
            "indemnit√©": ["allocation", "compensation", "d√©dommagement", "prime"],
            
            # Secteurs d'activit√©
            "industrie": ["industriel", "manufacture", "production", "transformation"],
            "plastique": ["mati√®re plastique", "polym√®re", "PVC", "poly√©thyl√®ne", 
                         "polypropyl√®ne", "mat√©riaux plastiques", "industrie plastique",
                         "industrie du plastique", "produits en plastique"],
            "agriculture": ["agricole", "exploitation agricole", "activit√© agricole", "farming"],
            "commerce": ["commercial", "n√©goce", "vente", "distribution"],
            "service": ["prestation", "prestataire", "activit√© de service"],
            
            # Professions m√©dicales et param√©dicales
            "kin√©sith√©rapeute": ["kin√©sith√©rapie", "masseur-kin√©sith√©rapeute", "kin√©", 
                                "r√©√©ducation fonctionnelle", "physioth√©rapeute"],
            "m√©decin": ["docteur", "praticien", "m√©decine", "m√©dical", "clinicien"],
            "infirmier": ["infirmi√®re", "soins infirmiers", "personnel soignant"],
            
            # Types d'imp√¥ts
            "TVA": ["taxe sur la valeur ajout√©e", "T.V.A", "tva"],
            "IS": ["imp√¥t sur les soci√©t√©s", "I.S", "imp√¥t soci√©t√©s"],
            "IR": ["imp√¥t sur le revenu", "I.R", "imp√¥t revenu"],
            
            # Termes juridiques
            "assujetti": ["redevable", "contribuable", "imposable", "soumis √†"],
            "d√©claration": ["d√©claratif", "d√©clarer", "d√©claration fiscale"],
            "cotisation": ["contribution", "quote-part", "participation"],
            
            # Termes sp√©cifiques
            "base": ["assiette", "base imposable", "base d'imposition"],
            "minimum": ["minimal", "minimale", "cotisation minimale"],
            "v√©hicule": ["voiture", "automobile", "transport de personnes"],
            "amortissement": ["dotation aux amortissements", "d√©pr√©ciation", "amortir"],
            "cr√©dit-bail": ["leasing", "location avec option d'achat", "LOA"],
            "repr√©sentation": ["indemnit√© de repr√©sentation", "frais de repr√©sentation", "prime de repr√©sentation"]
        }
        
        # Cr√©er un index invers√© pour recherche rapide
        self.inverse_index = {}
        for main_term, synonyms in self.synonyms.items():
            for synonym in synonyms:
                self.inverse_index[synonym.lower()] = main_term
            self.inverse_index[main_term.lower()] = main_term
    
    def expand_query(self, query: str) -> str:
        """Enrichit une requ√™te avec des synonymes pertinents"""
        query_lower = query.lower()
        expanded_terms = []
        
        # Chercher les termes qui ont des synonymes
        for term, synonyms in self.synonyms.items():
            if term.lower() in query_lower:
                # Ajouter les synonymes pertinents
                for synonym in synonyms[:3]:  # Limiter √† 3 synonymes pour ne pas diluer
                    if synonym.lower() not in query_lower:
                        expanded_terms.append(synonym)
        
        # Chercher dans l'index invers√©
        words = query_lower.split()
        for word in words:
            if word in self.inverse_index:
                main_term = self.inverse_index[word]
                if main_term in self.synonyms:
                    for synonym in self.synonyms[main_term][:2]:
                        if synonym.lower() not in query_lower and synonym not in expanded_terms:
                            expanded_terms.append(synonym)
        
        # Construire la requ√™te enrichie
        if expanded_terms:
            expanded_query = f"{query} {' '.join(expanded_terms)}"
            return expanded_query
        
        return query
    
    def get_all_variants(self, term: str) -> List[str]:
        """Retourne toutes les variantes d'un terme"""
        term_lower = term.lower()
        variants = [term]
        
        # Si c'est un terme principal
        if term_lower in self.synonyms:
            variants.extend(self.synonyms[term_lower])
        
        # Si c'est un synonyme
        if term_lower in self.inverse_index:
            main_term = self.inverse_index[term_lower]
            variants.append(main_term)
            variants.extend(self.synonyms.get(main_term, []))
        
        # Supprimer les doublons et retourner
        return list(set(variants))

# Initialiser le gestionnaire de synonymes
synonym_manager = FiscalSynonymManager()


class FiscalBotExcellence:
    """Chatbot fiscal d'excellence avec recherche optimis√©e et expertise CGI maximale"""
    
    def __init__(self):
        self.qdrant_client = qdrant_client_main
        self.synonym_manager = synonym_manager
        self.db = db  # Utiliser la base de donn√©es
        
        # Collections avec noms corrects - ANNEXE OPTIMIS√âE
        self.collections = {
            "main": "cgi_mainvoyage",
            "parent": "cgi_article_parentvoyage", 
            "sections": "cgi_sectionsvoyage",
            "annexe": "cgi_annexe_optimized"  # üîÑ NOUVELLE COLLECTION OPTIMIS√âE
        }
        
        # Configuration optimis√©e pour l'excellence
        self.config = {
            "annexe_score_threshold": 0.05,  # Seuil TR√àS BAS pour capturer plus d'annexes
            "annexe_search_limit": 20,       # Plus de r√©sultats pour mieux filtrer
            "main_search_threshold": 0.08,   # Seuil tr√®s bas pour ne rien manquer
            "semantic_search_limit": 12,     # Plus de r√©sultats s√©mantiques
            "section_search_limit": 5        # Recherche dans les sections aussi
        }
        
        # Logs de debug
        self.debug_logs = []
        
        # Syst√®me d'intelligence conversationnelle
        self.conversation_patterns = {
            "greetings": [
                "bonjour", "bonsoir", "salut", "hello", "hey", "coucou", "bonne journ√©e"
            ],
            "presentation_request": [
                "pr√©sente toi", "qui es tu", "que fais tu", "pr√©sentation", "qui √™tes vous"
            ],
            "help_request": [
                "aide", "help", "comment √ßa marche", "utilisation", "guide", "comment faire"
            ],
            "goodbye": [
                "au revoir", "bye", "√† bient√¥t", "merci", "bonne journ√©e", "salut"
            ]
        }
        
        # Contexte de conversation optimis√©
        self.conversation_context = {
            "last_question": "",
            "last_response": "",
            "last_articles": [],
            "last_search_results": [],
            "waiting_for_clarification": False,
            "context_articles": [],
            "context_topic": "",
            "user_name": None,
            "conversation_started": False,
            "search_history": []  # Historique des recherches pour am√©lioration continue
        }
    
    def log_debug(self, message: str):
        """Ajoute un message aux logs de debug avec timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        self.debug_logs.append(f"[{timestamp}] {message}")
    
    def clear_debug_logs(self):
        """Efface les logs de debug"""
        self.debug_logs = []
    
    def get_debug_logs(self) -> List[str]:
        """Retourne les logs de debug"""
        return self.debug_logs
    
    # D√©tection d'intention conversationnelle
    def detect_conversation_intent(self, query: str) -> str:
        """D√©tecte l'intention conversationnelle de l'utilisateur"""
        query_lower = query.lower().strip()
        
        # Extraction du nom si pr√©sent
        name_patterns = [
            r"je suis ([a-zA-Z√Ä-√ø\s]+)",
            r"je m'appelle ([a-zA-Z√Ä-√ø\s]+)",
            r"mon nom est ([a-zA-Z√Ä-√ø\s]+)"
        ]
        
        for pattern in name_patterns:
            match = re.search(pattern, query_lower)
            if match:
                self.conversation_context["user_name"] = match.group(1).strip().title()
        
        # NOUVEAU: D√©tecter les nombres simples comme articles
        # Si la requ√™te ne contient qu'un ou plusieurs nombres
        if re.match(r'^[\d\s,]+$', query.strip()):
            return "fiscal_question"
        
        # IMPORTANT: V√©rifier d'abord si c'est une question fiscale
        fiscal_keywords = [
            "imp√¥t", "taxe", "tva", "ir", "is", "cgi", "article", "exon√©ration", 
            "d√©duction", "soci√©t√©", "revenus", "b√©n√©fices", "d√©claration", "poisson",
            "viande", "l√©gumes", "fruits", "agriculture", "export", "import",
            "plafond", "indemnit√©", "revenu", "charge", "fiscal", "contribuable",
            "assujetti", "redevable", "cotisation", "base imposable", "plastiqu",
            "industrie", "exon√©r√©", "soci√©t√©s", "kin√©sith√©rapeute", "m√©decin",
            "minimum", "minimale", "assiette", "v√©hicule", "voiture", "amortissement",
            "cr√©dit-bail", "leasing", "transport", "repr√©sentation"
        ]
        
        if any(keyword in query_lower for keyword in fiscal_keywords):
            return "fiscal_question"
        
        # Ensuite seulement, v√©rifier les intentions conversationnelles
        for intent, patterns in self.conversation_patterns.items():
            if intent == "presentation_request":
                if any(f"{pattern}" in query_lower and 
                       not any(fiscal in query_lower for fiscal in ["indemnit√©", "repr√©sentation", "imp√¥t"]) 
                       for pattern in patterns):
                    return intent
            else:
                if any(pattern in query_lower for pattern in patterns):
                    return intent
        
        # Questions courtes qui pourraient √™tre des clarifications
        if len(query.split()) <= 5 and self.conversation_context["waiting_for_clarification"]:
            return "clarification"
        
        return "general_question"
    
    # R√©ponses conversationnelles intelligentes
    def generate_conversational_response(self, query: str, intent: str) -> str:
        """G√©n√®re des r√©ponses conversationnelles intelligentes"""
        
        user_name = self.conversation_context.get("user_name", "")
        name_part = f" {user_name}" if user_name else ""
        
        if intent == "greetings":
            if not self.conversation_context["conversation_started"]:
                self.conversation_context["conversation_started"] = True
                return f"""Bonjour{name_part} ! üëã

Je suis **AhmedTax 3.0**, votre assistant fiscal d'excellence sp√©cialis√© dans le Code G√©n√©ral des Imp√¥ts marocain 2025.

üèÜ **Version Excellence avec :**
‚Ä¢ Recherche s√©mantique enrichie par synonymes
‚Ä¢ Acc√®s complet aux articles CGI et documents annexes
‚Ä¢ R√©ponses directes sans r√©p√©titions inutiles
‚Ä¢ D√©tection intelligente des concepts fiscaux

üéØ **Je peux vous aider avec :**
‚Ä¢ Imp√¥t sur les Soci√©t√©s (IS)
‚Ä¢ Imp√¥t sur le Revenu (IR) 
‚Ä¢ Taxe sur la Valeur Ajout√©e (TVA)
‚Ä¢ Cotisation minimale et bases d'imposition
‚Ä¢ Exon√©rations et r√©gimes fiscaux
‚Ä¢ Amortissements et v√©hicules de transport

üí° **Exemples de questions :**
‚Ä¢ "Le poisson frais est-il soumis √† la TVA ?"
‚Ä¢ "Quelle est la base de la cotisation minimale ?"
‚Ä¢ "Quel est le nouveau plafond d'amortissement des v√©hicules ?"
‚Ä¢ "Les kin√©sith√©rapeutes sont-ils exon√©r√©s de TVA ?"
‚Ä¢ "10-III" pour voir la partie III de l'article 10
‚Ä¢ "144" pour consulter l'article 144

Comment puis-je vous assister aujourd'hui ?"""
            else:
                return f"Rebonjour{name_part} ! Comment puis-je vous aider avec vos questions fiscales ?"
        
        elif intent == "presentation_request":
            return f"""Je suis **AhmedTax 3.0**, votre expert fiscal num√©rique d'excellence ! üá≤üá¶

üìö **Ma sp√©cialit√© :**
Assistant IA de derni√®re g√©n√©ration sp√©cialis√© dans le Code G√©n√©ral des Imp√¥ts marocain (√©dition 2025), avec acc√®s complet aux textes d'application, circulaires et notes.




üîç **Recherche intelligente :**
Je trouve automatiquement les variantes de vos termes : "v√©hicule" ‚Üí "voiture", "automobile" ; "cr√©dit-bail" ‚Üí "leasing", etc.

Que souhaitez-vous savoir sur la fiscalit√© marocaine ?"""
        
        elif intent == "help_request":
            return f"""üÜò **Guide d'utilisation Excellence de FiscalBot{name_part}**

**Types de questions optimales :**

üéØ **Questions g√©n√©rales :**
‚Ä¢ "Qu'est-ce que la cotisation minimale ?"
‚Ä¢ "Comment fonctionne l'amortissement des v√©hicules ?"
‚Ä¢ "Quelles sont les exon√©rations de TVA ?"

üìñ **Consultation d'articles :**
‚Ä¢ "Article 10 du CGI"
‚Ä¢ "Article 144 sur la cotisation minimale"
‚Ä¢ "Article premier"
‚Ä¢ "10-III" pour la partie III de l'article 10
‚Ä¢ Juste "144" ou "10" pour consulter directement

üîç **Questions sp√©cifiques :**
‚Ä¢ "Le poisson frais est-il soumis √† la TVA ?" 
‚Ä¢ "Quel est le nouveau plafond d'amortissement des v√©hicules en 2025 ?"
‚Ä¢ "Une entreprise de plastique b√©n√©ficie-t-elle d'exon√©rations ?"
‚Ä¢ "Les kin√©sith√©rapeutes sont-ils exon√©r√©s de TVA ?"

üöÄ **Fonctionnalit√©s avanc√©es :**
‚Ä¢ **Recherche enrichie** : Je trouve automatiquement les synonymes
‚Ä¢ **Documents li√©s** : Je r√©cup√®re les circulaires et notes li√©es aux articles
‚Ä¢ **Contexte intelligent** : Je comprends les questions de suivi
‚Ä¢ **Analyse crois√©e** : Je combine CGI et textes d'application

üí° **Conseils pour l'excellence :**
‚úÖ Utilisez des termes naturels (voiture, leasing, etc.)
‚úÖ Posez des questions directes et claires
‚úÖ N'h√©sitez pas √† demander des pr√©cisions
‚úÖ Exploitez les questions de suivi

üîÑ **Exemple de conversation :**
1. "Amortissement des voitures ?"
2. "Et pour le cr√©dit-bail ?"
3. "Montrez-moi la circulaire"

Pr√™t pour une exp√©rience fiscale d'excellence ? Posez votre question !"""
        
        elif intent == "goodbye":
            return f"""Au revoir{name_part} ! üëã

J'esp√®re avoir pu vous apporter une assistance fiscale d'excellence. 

üîñ **Points cl√©s √† retenir :**
‚Ä¢ Les informations fournies sont bas√©es sur le CGI 2025 et ses textes d'application
‚Ä¢ Consultez toujours un expert-comptable pour valider vos d√©cisions
‚Ä¢ Les circulaires et notes peuvent apporter des pr√©cisions importantes
‚Ä¢ Gardez une trace de nos √©changes pour vos dossiers

Merci d'avoir utilis√© AhmedTax 3.0 - Votre partenaire fiscal d'excellence ! üá≤üá¶

√Ä bient√¥t pour de nouvelles questions fiscales !"""
        
        else:
            return None
    
    # M√©thode d'embedding optimis√©e SANS CACHE
    def get_embedding(self, text):
        """G√©n√®re un embedding avec Voyage Law-2 et enrichissement par synonymes"""
        # Enrichir le texte avec des synonymes
        enriched_text = self.synonym_manager.expand_query(text)
        
        # Utiliser Voyage Law-2 directement sans cache
        result = voyage_client.embed(
            [enriched_text], 
            model="voyage-law-2",
            input_type="query"  # Important: "query" pour les recherches utilisateur
        )
        
        embedding = result.embeddings[0]
        return embedding
    
    # Extraction d'articles AM√âLIOR√âE avec gestion des formats complexes
    def _extract_articles_from_query(self, query):
        """Extrait les num√©ros d'articles mentionn√©s dans la question"""
        articles = []
        
        # NOUVEAU: D√©tecter les nombres simples comme articles
        # Si la requ√™te ne contient que des nombres
        simple_numbers = re.findall(r'\b\d+\b', query)
        if re.match(r'^[\d\s,]+$', query.strip()):
            # C'est juste des nombres, les traiter comme des articles
            articles.extend(simple_numbers)
            self.log_debug(f"Nombres simples d√©tect√©s comme articles: {simple_numbers}")
            return articles
        
        # Patterns am√©lior√©s pour g√©rer tous les formats
        patterns = [
            # NOUVEAU: Format avec parties romaines (Article 10-III)
            r'article\s+(\d+)\s*-\s*([IVX]+)',
            r'art\.?\s*(\d+)\s*-\s*([IVX]+)',
            r'(\d+)\s*-\s*([IVX]+)',
            # Format complexe: 10(I-F-1¬∞-b)
            r'article\s+(\d+\s*\([^)]+\))',
            r'art\.?\s*(\d+\s*\([^)]+\))',
            # Formats standards
            r'article\s+(\d+)',
            r'art\.?\s*(\d+)',
            r"l'article\s+(\d+)",
            r'articles?\s+(\d+)',
            r'art\s+(\d+)',
            r'(\d+)\s*(?:du\s+)?(?:cgi|code)',
            r'(?:selon|conform√©ment|aux?\s+termes?\s+de)\s+l\'?article\s+(\d+)',
            r'article\s+(premier)',
        ]
        
        query_lower = query.lower()
        
        # Traiter les formats avec parties romaines
        for pattern in patterns[:3]:
            matches = re.findall(pattern, query_lower)
            for match in matches:
                if isinstance(match, tuple) and len(match) == 2:
                    # Format Article 10-III
                    article_num = match[0]
                    roman_part = match[1].upper()
                    normalized = f"{article_num}-{roman_part}"
                    if normalized not in articles:
                        articles.append(normalized)
                    # Ajouter aussi le num√©ro de base
                    if article_num not in articles:
                        articles.append(article_num)
        
        # Traiter les autres formats
        for pattern in patterns[3:]:
            matches = re.findall(pattern, query_lower)
            for match in matches:
                if match:
                    # Normaliser le format
                    normalized = match.replace(" ", "")
                    if normalized not in articles:
                        articles.append(normalized)
                    
                    # Si format complexe, extraire aussi le num√©ro de base
                    if '(' in normalized:
                        base_num = normalized.split('(')[0]
                        if base_num not in articles:
                            articles.append(base_num)
        
        if articles:
            self.log_debug(f"Articles extraits de '{query}': {articles}")
        
        return articles
    
    # RECHERCHE CGI EXCELLENCE avec gestion des parties d'articles
    def search_cgi_articles(self, query, limit=8):
        """Recherche CGI d'excellence avec recherche dans toutes les collections"""
        
        all_results = {}
        
        # 1. Recherche directe par articles mentionn√©s (priorit√© absolue)
        query_articles = self._extract_articles_from_query(query)
        
        if query_articles:
            self.log_debug(f"üéØ Articles d√©tect√©s: {query_articles}")
            
            for article_num in query_articles:
                try:
                    # G√©rer les formats avec parties romaines (10-III)
                    if '-' in article_num and any(char in article_num for char in 'IVX'):
                        base_article = article_num.split('-')[0]
                        roman_part = article_num.split('-')[1]
                        
                        # Rechercher d'abord l'article de base
                        filter_condition = Filter(
                            must=[
                                FieldCondition(
                                    key="article",
                                    match=MatchValue(value=base_article)
                                )
                            ]
                        )
                        
                        # Rechercher dans toutes les collections CGI
                        for collection_name in ["main", "parent", "sections"]:
                            if collection_name in self.collections:
                                try:
                                    results = self.qdrant_client.search(
                                        collection_name=self.collections[collection_name],
                                        query_vector=[0.0] * 1024,  # Voyage-law-2 uses 1024 dimensions
                                        query_filter=filter_condition,
                                        limit=10  # Plus de r√©sultats pour trouver la bonne partie
                                    )
                                    
                                    for result in results:
                                        content = result.payload.get("contenu", "")
                                        # V√©rifier si la partie romaine est dans le contenu
                                        if roman_part in content.upper() or f"-{roman_part}" in content.upper():
                                            # Score tr√®s √©lev√© pour match exact avec partie
                                            all_results[result.id] = (result, 1.0, collection_name, roman_part)
                                            self.log_debug(f"‚úÖ Article {article_num} partie {roman_part} trouv√©")
                                        else:
                                            # Ajouter quand m√™me mais avec score plus bas
                                            all_results[result.id] = (result, 0.95, collection_name, None)
                                    
                                except Exception as e:
                                    self.log_debug(f"‚ùå Erreur {collection_name}: {str(e)}")
                                    continue
                    else:
                        # Recherche normale pour les articles sans parties
                        filter_condition = Filter(
                            must=[
                                FieldCondition(
                                    key="article",
                                    match=MatchValue(value=article_num)
                                )
                            ]
                        )
                        
                        # Rechercher dans toutes les collections CGI
                        for collection_name in ["main", "parent", "sections"]:
                            if collection_name in self.collections:
                                try:
                                    results = self.qdrant_client.search(
                                        collection_name=self.collections[collection_name],
                                        query_vector=[0.0] * 1024,  # Voyage-law-2 uses 1024 dimensions
                                        query_filter=filter_condition,
                                        limit=5
                                    )
                                    
                                    for result in results:
                                        # Score tr√®s √©lev√© pour match exact d'article
                                        all_results[result.id] = (result, 0.99, collection_name, None)
                                    
                                    if results and collection_name != "sections":
                                        self.log_debug(f"‚úÖ Article {article_num} trouv√© dans {collection_name}")
                                        break
                                except Exception as e:
                                    self.log_debug(f"‚ùå Erreur {collection_name}: {str(e)}")
                                    continue
                    
                except Exception as e:
                    self.log_debug(f"‚ùå Erreur article {article_num}: {str(e)}")
        
        # 2. Recherche s√©mantique enrichie avec synonymes dans toutes les collections
        if len(all_results) < limit:
            try:
                # Enrichir la requ√™te avec des synonymes
                enriched_query = self.synonym_manager.expand_query(query)
                self.log_debug(f"üîÑ Requ√™te enrichie: {enriched_query}")
                
                query_vector = self.get_embedding(enriched_query)
                
                # Rechercher dans chaque collection avec des limites diff√©rentes
                search_configs = [
                    ("main", limit),
                    ("parent", limit),
                    ("sections", self.config["section_search_limit"])
                ]
                
                for collection_name, collection_limit in search_configs:
                    if collection_name in self.collections:
                        try:
                            remaining_limit = limit - len(all_results)
                            if remaining_limit <= 0:
                                break
                                
                            semantic_results = self.qdrant_client.search(
                                collection_name=self.collections[collection_name],
                                query_vector=query_vector,
                                limit=min(collection_limit, remaining_limit * 2)
                            )
                            
                            # Analyse intelligente des r√©sultats
                            for result in semantic_results:
                                payload = result.payload
                                content = payload.get("contenu", "").lower()
                                keywords = payload.get("enriched_keywords", payload.get("keywords", []))
                                
                                # Calcul du score avec bonus pour matches de synonymes
                                bonus_score = 0
                                query_words = query.lower().split()
                                
                                for word in query_words:
                                    # V√©rifier les variantes du mot
                                    variants = self.synonym_manager.get_all_variants(word)
                                    for variant in variants:
                                        if variant.lower() in content:
                                            bonus_score += 0.05
                                        # Bonus suppl√©mentaire si dans les mots-cl√©s enrichis
                                        if any(variant.lower() in kw.lower() for kw in keywords):
                                            bonus_score += 0.1
                                
                                # Bonus si c'est une section pertinente
                                if collection_name == "sections" and payload.get("type") == "section":
                                    section_title = payload.get("section_title", "").lower()
                                    if any(word in section_title for word in query_words):
                                        bonus_score += 0.15
                                
                                adjusted_score = result.score + bonus_score
                                
                                # Seuil adaptatif selon la collection
                                threshold = self.config["main_search_threshold"]
                                if collection_name == "sections":
                                    threshold *= 0.8  # Plus permissif pour les sections
                                
                                if adjusted_score >= threshold:
                                    if result.id not in all_results or adjusted_score > all_results[result.id][1]:
                                        all_results[result.id] = (result, adjusted_score, collection_name, None)
                                
                        except Exception as e:
                            self.log_debug(f"‚ùå Erreur s√©mantique {collection_name}: {str(e)}")
                
            except Exception as e:
                self.log_debug(f"‚ùå Erreur embedding: {str(e)}")
        
        # 3. Boost des r√©sultats bas√© sur la pertinence contextuelle
        if self.conversation_context["last_articles"]:
            for article_id, (result, score, collection, part) in all_results.items():
                article_num = result.payload.get("article", "")
                if article_num in self.conversation_context["last_articles"]:
                    # Boost pour continuit√© contextuelle
                    all_results[article_id] = (result, score + 0.1, collection, part)
        
        # Trier et retourner les meilleurs r√©sultats
        sorted_results = sorted(all_results.values(), key=lambda x: x[1], reverse=True)
        
        # Diversifier les r√©sultats (pas trop du m√™me article)
        final_results = []
        articles_seen = {}
        
        for result_data in sorted_results[:limit * 2]:
            result = result_data[0]
            score = result_data[1]
            collection = result_data[2]
            part = result_data[3] if len(result_data) > 3 else None
            
            article_num = result.payload.get("article", "")
            
            # Limiter √† 3 r√©sultats max par article
            if article_num not in articles_seen:
                articles_seen[article_num] = 0
            
            if articles_seen[article_num] < 3:
                # Ajouter l'info de la partie si elle existe
                if part:
                    result.payload["requested_part"] = part
                
                final_results.append(result)
                articles_seen[article_num] += 1
                
            if len(final_results) >= limit:
                break
        
        self.log_debug(f"üéØ {len(final_results)} r√©sultats trouv√©s (recherche excellence)")
        
        # Sauvegarder pour le contexte
        self.conversation_context["last_search_results"] = final_results
        
        return final_results
    
    def extract_article_numbers(self, search_results):
        """Extrait les num√©ros d'articles des r√©sultats de recherche"""
        articles = []
        for result in search_results:
            article_num = result.payload.get("article", "")
            if article_num and article_num not in articles:
                articles.append(article_num)
        return articles
    
    # G√©n√©ration de r√©ponse EXCELLENCE avec gestion des parties d'articles
    def generate_cgi_response_excellence(self, query, cgi_results, use_context=False):
        """G√©n√®re une r√©ponse d'excellence bas√©e sur le CGI sans phrases r√©p√©titives"""
        
        if not cgi_results:
            query_articles = self._extract_articles_from_query(query)
            if query_articles:
                articles_text = ", ".join(query_articles)
                return f"""‚ùå **Article(s) {articles_text} non trouv√©(s) dans la base CGI**

üí° **Suggestions pour une recherche optimale :**
‚Ä¢ V√©rifiez le num√©ro d'article (format: 10, 144, premier, 10-III)
‚Ä¢ L'article pourrait √™tre abrog√© ou renum√©rot√©
‚Ä¢ Essayez une recherche th√©matique (ex: "cotisation minimale", "amortissement v√©hicules")
‚Ä¢ Utilisez des synonymes (voiture ‚Üí v√©hicule, leasing ‚Üí cr√©dit-bail)

üîç **Recherches alternatives sugg√©r√©es :**
‚Ä¢ Par type d'imp√¥t: "TVA poisson", "IS plastique"
‚Ä¢ Par concept: "plafond indemnit√©", "base cotisation"
‚Ä¢ Par profession: "kin√©sith√©rapeute exon√©ration"
"""
            else:
                return f"""‚ùå **Aucune disposition trouv√©e pour : "{query}"**

üîç **Optimisez votre recherche avec :**
‚Ä¢ **Mots-cl√©s fiscaux** : TVA, IS, IR, exon√©ration, cotisation, amortissement
‚Ä¢ **Termes naturels** : voiture (au lieu de v√©hicule), leasing (au lieu de cr√©dit-bail)
‚Ä¢ **Questions pr√©cises** : "Plafond amortissement voitures 2025"
‚Ä¢ **Articles sp√©cifiques** : "Article 10", "Article 144", "10-III"

üí° **Exemples de questions efficaces :**
‚Ä¢ "Le poisson frais est-il soumis √† la TVA ?"
‚Ä¢ "Nouveau plafond amortissement v√©hicules ?"
‚Ä¢ "Base de calcul cotisation minimale ?"
‚Ä¢ "Kin√©sith√©rapeutes exon√©ration TVA ?"

Je suis optimis√© pour comprendre le langage naturel et les synonymes !"""
        
        # Construire le contexte CGI enrichi
        cgi_context = ""
        articles_found = set()
        
        for i, result in enumerate(cgi_results):
            metadata = result.payload
            article_num = metadata.get("article", "N/A")
            article_name = metadata.get("nom_article", "Sans titre")
            content = metadata.get("contenu", "")
            requested_part = metadata.get("requested_part", None)
            
            # Si une partie sp√©cifique est demand√©e, essayer de l'extraire
            if requested_part:
                # Chercher la partie dans le contenu
                part_pattern = f"{requested_part}[.\-\s]"
                part_match = re.search(part_pattern, content, re.IGNORECASE)
                if part_match:
                    # Extraire √† partir de cette partie jusqu'√† la prochaine partie ou fin
                    start_pos = part_match.start()
                    # Chercher la prochaine partie romaine
                    next_part_pattern = r'[IVX]+[.\-\s]'
                    next_match = re.search(next_part_pattern, content[start_pos+len(part_match.group(0)):])
                    if next_match:
                        end_pos = start_pos + len(part_match.group(0)) + next_match.start()
                        content = content[start_pos:end_pos]
                    else:
                        content = content[start_pos:]
                    cgi_context += f"\n--- ARTICLE {article_num} - PARTIE {requested_part} ---\n"
                else:
                    cgi_context += f"\n--- ARTICLE {article_num} (partie {requested_part} demand√©e) ---\n"
            # Pour les sections, inclure le titre de section
            elif metadata.get("type") == "section":
                section_title = metadata.get("section_title", "")
                cgi_context += f"\n--- ARTICLE {article_num} - SECTION: {section_title} ---\n"
            else:
                cgi_context += f"\n--- ARTICLE {article_num} ---\n"
            
            cgi_context += f"Titre: {article_name}\n"
            cgi_context += f"Contenu: {content}\n"
            
            articles_found.add(article_num)
        
        # NOUVELLE LOGIQUE: Si l'article 19 est trouv√©, r√©cup√©rer automatiquement l'article 247 partie 4
        if "19" in articles_found:
            self.log_debug("üîÑ Article 19 d√©tect√© - R√©cup√©ration automatique de l'article 247 partie 4")
            try:
                # Rechercher l'article 247 avec split_part = 4
                filter_condition = Filter(
                    must=[
                        FieldCondition(
                            key="article",
                            match=MatchValue(value="247")
                        ),
                        FieldCondition(
                            key="split_part",
                            match=MatchValue(value=4)
                        )
                    ]
                )
                
                # Rechercher dans toutes les collections CGI
                for collection_name in ["main", "parent", "sections"]:
                    if collection_name in self.collections:
                        try:
                            results_247 = self.qdrant_client.search(
                                collection_name=self.collections[collection_name],
                                query_vector=[0.0] * 1024,
                                query_filter=filter_condition,
                                limit=1
                            )
                            
                            if results_247:
                                result_247 = results_247[0]
                                metadata_247 = result_247.payload
                                article_num_247 = metadata_247.get("article", "247")
                                article_name_247 = metadata_247.get("nom_article", "Dispositions transitoires")
                                content_247 = metadata_247.get("contenu", "")
                                
                                # Ajouter l'article 247 partie 4 au contexte
                                cgi_context += f"\n--- ARTICLE {article_num_247} - PARTIE 4 (Taux transitoires IS 2025) ---\n"
                                cgi_context += f"Titre: {article_name_247}\n"
                                cgi_context += f"Contenu: {content_247}\n"
                                
                                articles_found.add(article_num_247)
                                self.log_debug("‚úÖ Article 247 partie 4 ajout√© automatiquement au contexte")
                                break
                                
                        except Exception as e:
                            self.log_debug(f"‚ùå Erreur recherche article 247 partie 4 dans {collection_name}: {str(e)}")
                            continue
                            
            except Exception as e:
                self.log_debug(f"‚ùå Erreur lors de la r√©cup√©ration automatique de l'article 247 partie 4: {str(e)}")
        
        # NOUVELLE LOGIQUE: Si l'article 133 est trouv√©, r√©cup√©rer automatiquement toutes les parties de l'article 129
        if "133" in articles_found:
            self.log_debug("üîÑ Article 133 d√©tect√© - R√©cup√©ration automatique de toutes les parties de l'article 129")
            try:
                # Rechercher toutes les parties de l'article 129 (I, II, III, IV, V)
                filter_condition_129 = Filter(
                    must=[
                        FieldCondition(
                            key="article",
                            match=MatchValue(value="129")
                        )
                    ]
                )
                
                # Rechercher dans toutes les collections CGI
                for collection_name in ["main", "parent", "sections"]:
                    if collection_name in self.collections:
                        try:
                            results_129 = self.qdrant_client.search(
                                collection_name=self.collections[collection_name],
                                query_vector=[0.0] * 1024,
                                query_filter=filter_condition_129,
                                limit=10  # R√©cup√©rer plusieurs parties
                            )
                            
                            if results_129:
                                for result_129 in results_129:
                                    metadata_129 = result_129.payload
                                    article_num_129 = metadata_129.get("article", "129")
                                    article_name_129 = metadata_129.get("nom_article", "Exon√©rations")
                                    content_129 = metadata_129.get("contenu", "")
                                    partie_article = metadata_129.get("partie_article", "")
                                    
                                    # √âviter les doublons
                                    if article_num_129 not in articles_found:
                                        # Ajouter l'article 129 au contexte
                                        partie_info = f" - PARTIE {partie_article}" if partie_article else ""
                                        cgi_context += f"\n--- ARTICLE {article_num_129}{partie_info} (Exon√©rations droits d'enregistrement) ---\n"
                                        cgi_context += f"Titre: {article_name_129}\n"
                                        cgi_context += f"Contenu: {content_129}\n"
                                        
                                        articles_found.add(article_num_129)
                                        self.log_debug(f"‚úÖ Article 129{partie_info} ajout√© automatiquement au contexte")
                                
                                break  # Sortir apr√®s avoir trouv√© dans une collection
                                
                        except Exception as e:
                            self.log_debug(f"‚ùå Erreur recherche article 129 dans {collection_name}: {str(e)}")
                            continue
                            
            except Exception as e:
                self.log_debug(f"‚ùå Erreur lors de la r√©cup√©ration automatique de l'article 129: {str(e)}")
        
        # Sauvegarder les articles trouv√©s pour le contexte
        self.conversation_context["last_articles"] = list(articles_found)
        
        # Prompt EXCELLENCE sans r√©p√©titions
        if use_context and self.conversation_context["waiting_for_clarification"]:
            main_prompt = f"""Tu es AhmedTax 3.0, expert fiscal marocain d'excellence sp√©cialis√© dans le CGI 2025.

CONTEXTE DE CONVERSATION:
- Question pr√©c√©dente: {self.conversation_context['last_question']}
- Articles consult√©s: {', '.join(self.conversation_context['context_articles'])}
- Clarification demand√©e sur: {self.conversation_context.get('context_topic', 'aspect non pr√©cis√©')}

L'utilisateur apporte des pr√©cisions.

R√àGLES D'EXCELLENCE:
1. Utilise le contexte pour affiner ta r√©ponse
2. Cite TOUJOURS les articles avec leurs dispositions exactes
3. Structure ta r√©ponse de mani√®re claire et progressive
4. Anticipe les questions de suivi possibles

Question/clarification: "{query}"

Extraits du CGI:
{cgi_context}"""
        else:
                main_prompt = f"""Tu es AhmedTax, un expert fiscal marocain sp√©cialis√© dans le Code G√©n√©ral des Imp√¥ts (CGI) 2025.

            R√àGLES PRINCIPALES:
            1. R√©ponds UNIQUEMENT en te basant sur les extraits du CGI fournis dans le contexte.
            2. Ne fais JAMAIS de suppositions sur des informations non pr√©sentes dans le contexte.
            3. Cite TOUJOURS les num√©ros d'articles pr√©cis sur lesquels tu t'appuies.
            4. Pour ta PREMI√àRE r√©ponse seulement, commence par "Votre question porte sur [sujet fiscal pr√©cis]."
            5. Respecte STRICTEMENT les taux et dispositions mentionn√©s dans les articles, surtout les plus r√©cents (2025).
            6. Si un article donne une d√©finition ou une exclusion explicite, elle doit figurer dans ta r√©ponse.
            7. IGNORE COMPL√àTEMENT les dispositions abrog√©es - ne les mentionne jamais dans tes r√©ponses.
            8. Si une √©num√©ration d√©passe 10 √©l√©ments, regroupe-les par cat√©gories logiques (ex: "organismes sociaux", "fondations", "agences de d√©veloppement").


            STRUCTURE DE R√âPONSE:
            - Premi√®re ligne: identification du sujet fiscal (uniquement premi√®re r√©ponse)
            - Corps: explication claire et rigoureuse avec citation explicite des articles
            - Si n√©cessaire: demande pr√©cise d'informations compl√©mentaires

            N'UTILISE JAMAIS de formules comme "je ne sais pas" ou "je n'ai pas assez d'informations".
            Si le contexte est insuffisant, demande des pr√©cisions cibl√©es.

            L'utilisateur pose la question suivante : "{query}"

            Extraits du CGI:
            {cgi_context}"""
                    

                    
        try:
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(
                main_prompt,
                generation_config={
                    "temperature": 0.1,  # Plus factuel
                    "top_p": 0.95,
                    "max_output_tokens": 2500,
                }
            )
            
            fct_response = response.text
            
            # NOUVELLE FONCTIONNALIT√â : Recherche dans les annexes FCT
            self.log_debug("üîç Recherche compl√©mentaire dans les annexes FCT...")
            annexe_results = self.search_fct_annexes(query, limit=self.config["annexe_search_limit"])
            
            # Ajouter les pr√©cisions des annexes si pertinentes
            final_response = self.add_annexe_to_fct_response(fct_response, annexe_results, query)
            
            return final_response
            
        except Exception as e:
            return f"‚ùå Erreur lors de la g√©n√©ration de la r√©ponse: {str(e)}"
    
    # M√©thodes de contexte optimis√©es
    def _is_clarification_request(self, response: str) -> bool:
        """D√©tecte si la r√©ponse demande une clarification"""
        clarification_indicators = [
            "pourriez-vous pr√©ciser",
            "pouvez-vous pr√©ciser", 
            "quelle est votre situation",
            "dans quel contexte",
            "souhaitez-vous conna√Ætre",
            "de quel type",
            "pour quelle activit√©"
        ]
        
        response_lower = response.lower()
        return any(indicator in response_lower for indicator in clarification_indicators)
    
    def _extract_topic_from_response(self, response: str) -> str:
        """Extrait le sujet principal de la r√©ponse pour le contexte"""
        # Chercher les concepts cl√©s dans la r√©ponse
        topics = []
        
        fiscal_concepts = {
            "cotisation minimale": ["cotisation minimale", "article 144", "base de calcul"],
            "amortissement v√©hicules": ["amortissement", "v√©hicule", "400 000", "transport de personnes"],
            "TVA": ["TVA", "taxe sur la valeur ajout√©e", "taux"],
            "exon√©ration": ["exon√©ration", "exon√©r√©", "franchise"],
            "indemnit√©": ["indemnit√©", "plafond", "allocation"],
            "repr√©sentation": ["repr√©sentation", "indemnit√© de repr√©sentation", "frais de repr√©sentation"]
        }
        
        response_lower = response.lower()
        for concept, keywords in fiscal_concepts.items():
            if any(kw in response_lower for kw in keywords):
                topics.append(concept)
        
        return topics[0] if topics else "disposition fiscale"
    
    def _update_context(self, question: str, response: str, articles: List[str]):
        """Met √† jour le contexte de conversation avec plus d'intelligence"""
        self.conversation_context.update({
            "last_question": question,
            "last_response": response[:500],  # Premiers 500 caract√®res
            "waiting_for_clarification": self._is_clarification_request(response),
            "context_articles": articles,
            "context_topic": self._extract_topic_from_response(response)
        })
        
        # Ajouter √† l'historique de recherche
        self.conversation_context["search_history"].append({
            "query": question,
            "articles": articles,
            "timestamp": datetime.now()
        })
        
        # Limiter l'historique √† 10 derni√®res recherches
        if len(self.conversation_context["search_history"]) > 3:
            self.conversation_context["search_history"].pop(0)
    
    def _clear_context(self):
        """Efface le contexte de conversation"""
        self.conversation_context.update({
            "last_question": "",
            "last_response": "",
            "last_articles": [],
            "last_search_results": [],
            "waiting_for_clarification": False,
            "context_articles": [],
            "context_topic": "",
            "search_history": []
        })
    
    # RECHERCHE ANNEXE HYBRIDE - Textuelle + S√©mantique
    def search_annexe_excellence(self, article_numbers, query, cgi_response=""):
        """Recherche hybride dans l'annexe - textuelle directe + s√©mantique"""
        if not query:
            return []
        
        try:
            all_results = {}
            query_lower = query.lower()
            
            # 1. RECHERCHE TEXTUELLE DIRECTE - Pour les cas sp√©cifiques
            self.log_debug(f"üîç Recherche annexe hybride pour: {query[:100]}")
            
            # D√©finir les patterns de recherche directe
            direct_search_patterns = {
        # Pour l'industrie (chaussures, plastique, etc.)
        "industrie": {
            "keywords": ["plastique", "chaussures", "fabrication", "industrie", "activit√©s industrielles"],
            "doc_types": ["d√©cret"],
            "content_patterns": [
                r"industrie\s+du\s+plastique",
                r"industrie\s+de\s+la\s+chaussure",
                r"fabrication\s+de\s+chaussures",
                r"activit√©s\s+industrielles\s+exon√©r√©es",
                r"liste\s+des\s+activit√©s"
            ]
        },
        # Pour les indemnit√©s
        "indemnit√©": {
            "keywords": ["indemnit√©", "plafond", "repr√©sentation", "caisse"],
            "doc_types": ["note_service", "note_circulaire"],
            "content_patterns": [
                r"indemnit√©\s+de\s+(?:repr√©sentation|caisse).*?(\d+\s*%|\d+\s*dirhams?)",
                r"plafond.*?(\d+\s*%|\d+\s*dirhams?)",
                r"exon√©ration.*?plafonn√©.*?(\d+\s*%)"
            ]
        }
    }
            
            # D√©tecter le type de recherche
            search_type = None
            for stype, config in direct_search_patterns.items():
                if any(kw in query_lower for kw in config["keywords"]):
                    search_type = stype
                    break
            
            # 2. RECHERCHE TEXTUELLE SI PATTERN D√âTECT√â - Nouvelle collection optimis√©e
            if search_type:
                config = direct_search_patterns[search_type]
                self.log_debug(f"   Type d√©tect√©: {search_type}")
                
                # Utiliser les flags de la collection optimis√©e
                if search_type == "plastique":
                    # Recherche par filtre sur has_plastique
                    filter_condition = Filter(
                        must=[
                            FieldCondition(
                                key="has_plastique",
                                match=MatchValue(value=True)
                            )
                        ]
                    )
                elif search_type == "repr√©sentation":
                    # Recherche par filtre sur has_representation
                    filter_condition = Filter(
                        must=[
                            FieldCondition(
                                key="has_representation", 
                                match=MatchValue(value=True)
                            )
                        ]
                    )
                elif search_type == "industrie" and "chaussures" in query_lower:
                    # Recherche par filtre sur has_chaussures
                    filter_condition = Filter(
                        must=[
                            FieldCondition(
                                key="has_chaussures",
                                match=MatchValue(value=True)
                            )
                        ]
                    )
                else:
                    # Recherche par type de document
                    filter_condition = Filter(
                        must=[
                            FieldCondition(
                                key="type",
                                match=MatchAny(any=config["doc_types"])
                            )
                        ]
                    )
                
                try:
                    # Recherche avec filtre
                    filtered_results = self.qdrant_client.search(
                        collection_name=self.collections["annexe"],
                        query_vector=[0.0] * 1024,  # Vecteur vide car on utilise le filtre
                        query_filter=filter_condition,
                        limit=10
                    )
                    
                    # Analyser chaque r√©sultat filtr√©
                    for result in filtered_results:
                        payload = result.payload
                        content = payload.get("contenu", "").lower()
                        score = 0.5  # Score de base pour filtre
                        
                        # V√©rifier les patterns de contenu pour confirmer
                        for pattern in config["content_patterns"]:
                            if re.search(pattern, content, re.IGNORECASE):
                                score += 0.3
                                self.log_debug(f"   ‚úÖ Pattern trouv√© dans {payload.get('type')}")
                                
                                # Extraire des infos sp√©cifiques
                                if search_type == "repr√©sentation":
                                    plafond_match = re.search(pattern, content, re.IGNORECASE)
                                    if plafond_match and plafond_match.group(1):
                                        self.log_debug(f"   üí∞ Plafond trouv√©: {plafond_match.group(1)}")
                                        score += 0.2
                                break
                        
                        # Bonus pour articles li√©s
                        if article_numbers:
                            articles_lies = payload.get("articles_lies", [])
                            if any(str(art) in [str(a) for a in articles_lies] for art in article_numbers):
                                score += 0.2
                                self.log_debug(f"   üìé Articles li√©s correspondants")
                        
                        if score > 0.5:
                            all_results[result.id] = (result, score, "filter")
                            
                except Exception as e:
                    self.log_debug(f"‚ùå Erreur recherche filtr√©e: {str(e)}")
            
            # 3. RECHERCHE S√âMANTIQUE COMPL√âMENTAIRE
            try:
                # Construire une requ√™te enrichie pour la recherche s√©mantique
                enriched_query = query
                
                # Ajouter des termes sp√©cifiques selon le contexte
                if "plastique" in query_lower:
                    enriched_query += " industrie du plastique mati√®re plastique fabrication produits plastiques activit√©s industrielles exon√©r√©es d√©cret"
                elif "repr√©sentation" in query_lower:
                    enriched_query += " indemnit√© repr√©sentation plafond 10% salaire base note service"
                
                # Ajouter les articles
                if article_numbers:
                    enriched_query += f" article {' '.join(str(a) for a in article_numbers[:3])}"
                
                # Enrichir avec les synonymes
                enriched_query = self.synonym_manager.expand_query(enriched_query)
                
                self.log_debug(f"üîç Recherche s√©mantique compl√©mentaire")
                
                # Recherche s√©mantique
                query_vector = self.get_embedding(enriched_query)
                
                semantic_results = self.qdrant_client.search(
                    collection_name=self.collections["annexe"],
                    query_vector=query_vector,
                    limit=10
                )
                
                # Ajouter les r√©sultats s√©mantiques non trouv√©s par la recherche textuelle
                for result in semantic_results:
                    if result.id not in all_results:
                        # Analyser la pertinence
                        payload = result.payload
                        content = payload.get("contenu", "").lower()
                        
                        # Bonus si le contenu contient des termes cl√©s
                        bonus = 0
                        if search_type == "plastique" and ("plastique" in content or payload.get("has_plastique")):
                            bonus = 0.2
                        elif search_type == "repr√©sentation" and ("repr√©sentation" in content or "10%" in content or payload.get("has_representation")):
                            bonus = 0.2
                        
                        adjusted_score = result.score + bonus
                        
                        if adjusted_score >= 0.1:  # Seuil tr√®s bas
                            all_results[result.id] = (result, adjusted_score, "semantic")
                
            except Exception as e:
                self.log_debug(f"‚ùå Erreur recherche s√©mantique: {str(e)}")
            
            # 4. TRIER ET RETOURNER LES MEILLEURS R√âSULTATS
            if all_results:
                # Trier par score
                sorted_results = sorted(all_results.values(), key=lambda x: x[1], reverse=True)
                
                # Prendre les 3 meilleurs
                final_results = []
                for result_data in sorted_results[:3]:
                    result = result_data[0]
                    score = result_data[1]
                    method = result_data[2]
                    
                    self.log_debug(f"   üìÑ R√©sultat: {result.payload.get('type')} - Score: {score:.3f} - M√©thode: {method}")
                    
                    final_results.append(result)
                
                self.log_debug(f"üìö {len(final_results)} annexes trouv√©es")
                return final_results
            
            # 5. SI AUCUN R√âSULTAT AVEC LA RECHERCHE HYBRIDE, FALLBACK S√âMANTIQUE PURE
            self.log_debug("‚ö†Ô∏è Aucun r√©sultat hybride, fallback s√©mantique")
            
            # Recherche s√©mantique pure avec seuil tr√®s bas
            query_vector = self.get_embedding(query)
            fallback_results = self.qdrant_client.search(
                collection_name=self.collections["annexe"],
                query_vector=query_vector,
                limit=3
            )
            
            return [r for r in fallback_results if r.score >= 0.05]
            
        except Exception as e:
            self.log_debug(f"‚ùå Erreur g√©n√©rale recherche annexe: {str(e)}")
            return []
    
    def _extract_key_concepts_advanced(self, text):
        """Extraction avanc√©e des concepts cl√©s pour enrichir la recherche"""
        concepts = []
        
        # Concepts fiscaux importants √©largis
        fiscal_concepts = {
            "amortissement": ["amortissement", "dotation", "d√©pr√©ciation", "400 000", "300 000"],
            "v√©hicule": ["v√©hicule", "voiture", "automobile", "transport de personnes"],
            "cr√©dit-bail": ["cr√©dit-bail", "leasing", "location", "redevance"],
            "cotisation": ["cotisation minimale", "base", "assiette", "article 144"],
            "indemnit√©": ["indemnit√©", "plafond", "exon√©ration", "allocation"],
            "TVA": ["TVA", "taxe valeur ajout√©e", "taux", "exon√©ration"],
            "repr√©sentation": ["repr√©sentation", "indemnit√© de repr√©sentation", "10%"],
            "plastique": ["plastique", "industrie du plastique", "mati√®re plastique"],
            "industrie": ["industrie", "industriel", "activit√©s industrielles", "soci√©t√©s industrielles"],
            "exon√©ration": ["exon√©ration", "exon√©r√©", "cinq premiers exercices", "temporaire"]
        }
        
        text_lower = text.lower()
        
        # Chercher les concepts pr√©sents
        for concept, keywords in fiscal_concepts.items():
            if any(kw in text_lower for kw in keywords):
                concepts.extend(keywords[:3])  # Prendre les 3 premiers mots-cl√©s
        
        # Extraire les montants importants
        amounts = re.findall(r'\d+(?:\s*\d+)*\s*(?:dirhams?|dh|mad)', text_lower)
        concepts.extend(amounts[:3])
        
        # Extraire les pourcentages
        percentages = re.findall(r'\d+(?:,\d+)?\s*%', text_lower)
        concepts.extend(percentages[:2])
        
        # Extraire les r√©f√©rences r√©glementaires
        if "voie r√©glementaire" in text_lower or "d√©cret" in text_lower:
            concepts.append("d√©cret")
        if "note de service" in text_lower:
            concepts.append("note de service")
        if "circulaire" in text_lower:
            concepts.append("circulaire")
        
        return list(set(concepts))[:15]  # Maximum 15 concepts uniques
    
    def process_annexes_unified(self, query, cgi_response, annexe_results):
        """Traite TOUTES les annexes et g√©n√®re une r√©ponse constructive qui explique les changements"""
        
        if not annexe_results:
            return ""
        
        # 1. Construire le contexte de TOUTES les annexes avec le contenu COMPLET
        annexe_context = ""
        annexes_info = []
        
        for i, result in enumerate(annexe_results[:5]):  # Max 5 annexes
            payload = result.payload
            type_doc = payload.get("type", "Document")
            numero = payload.get("numero", "")
            date = payload.get("date", "")
            objet = payload.get("objet", "")
            contenu = payload.get("contenu", "")
            articles_lies = payload.get("articles_lies", [])
            
            # Construire le nom r√©el du document
            nom_document = ""
            if type_doc and numero:
                nom_document = f"{type_doc} n¬∞ {numero}"
            elif type_doc:
                nom_document = type_doc
            elif numero:
                nom_document = f"Document n¬∞ {numero}"
            else:
                nom_document = f"Document {objet[:50]}..." if objet else f"Document sans titre"
            
            # Ajouter au contexte global avec le nom r√©el
            annexe_context += f"\n\n--- {nom_document.upper()} ---\n"
            if date:
                annexe_context += f"Date: {date}\n"
            if objet:
                annexe_context += f"Objet: {objet}\n"
            if articles_lies:
                annexe_context += f"Articles li√©s: {', '.join(str(a) for a in articles_lies)}\n"
            
            # INCLURE LE CONTENU COMPLET au lieu des extractions cibl√©es
            annexe_context += f"Contenu complet:\n{contenu}\n"
        
        # 2. NOUVEAU PROMPT pour v√©rifier la pertinence et g√©n√©rer une r√©ponse constructive
        unified_prompt = f"""Tu es AhmedTax, expert fiscal marocain. Tu dois analyser les documents d'application pour d√©terminer s'ils apportent des pr√©cisions pertinentes √† la r√©ponse CGI.

QUESTION DE L'UTILISATEUR: "{query}"

R√âPONSE CGI D√âJ√Ä FOURNIE:
{cgi_response}

DOCUMENTS D'APPLICATION √Ä ANALYSER:
{annexe_context}

INSTRUCTIONS IMPORTANTES:

1. **V√âRIFICATION DE PERTINENCE** : Analyse d'abord si les documents d'application apportent des pr√©cisions utiles et pertinentes √† la question pos√©e et √† la r√©ponse CGI.

2. **SI LES DOCUMENTS NE SONT PAS PERTINENTS** (hors sujet, pas de pr√©cisions utiles, informations d√©j√† couvertes par le CGI) :
   - R√©ponds EXACTEMENT : "Aucune pr√©cisions √† apporter"
   - Ne g√©n√®re aucune autre r√©ponse

3. **SI LES DOCUMENTS SONT PERTINENTS** :
   - EXTRAIT les informations sp√©cifiques qui compl√®tent ou pr√©cisent la r√©ponse CGI
   - G√âN√àRE une r√©ponse constructive qui EXPLIQUE concr√®tement ce qui change ou se pr√©cise
   - CITE les documents par leur nom r√©el (ex: "Note circulaire n¬∞ 736", "D√©cret n¬∞ 2-17-743") et NON par "document 1", "document 2"
   - INT√àGRE les informations trouv√©es dans une explication fluide et pratique
   - DONNE des r√©ponses d√©finitives bas√©es sur les documents trouv√©s

STRUCTURE DE LA R√âPONSE (si pertinente):
- Identifier ce qui √©tait impr√©cis dans la r√©ponse CGI
- Expliquer concr√®tement ce que les documents d'application apportent comme pr√©cisions
- Citer les documents par leur nom r√©el
- Donner la r√©ponse finale claire et pratique

EXEMPLES de r√©ponses constructives attendues:

Pour une question sur les activit√©s industrielles exon√©r√©es:
"La r√©ponse CGI mentionnait que les activit√©s industrielles exon√©r√©es sont 'fix√©es par voie r√©glementaire' sans donner la liste. Le d√©cret n¬∞ 2-17-743 du 19 juin 2018 permet maintenant de r√©pondre pr√©cis√©ment : OUI, votre soci√©t√© de fabrication de chaussures peut b√©n√©ficier de l'exon√©ration car l'industrie de la chaussure figure explicitement au point X de la liste des activit√©s industrielles exon√©r√©es."

Pour une question sur les plafonds d'indemnit√©s:
"La r√©ponse CGI indiquait que les indemnit√©s doivent √™tre justifi√©es sans pr√©ciser le plafond. La note de service DGI n¬∞ 123 apporte la pr√©cision manquante : le plafond de l'indemnit√© de caisse admise en exon√©ration est fix√© √† 500 dirhams par mois selon cette note de service."

TON ET STYLE:
- R√©ponse fluide et naturelle, pas de format de citation
- Explication claire de ce qui change par rapport √† la r√©ponse CGI
- R√©ponse d√©finitive et pratique pour l'utilisateur
- √âviter les formules comme "il faut consulter" - donner directement la r√©ponse
- Citer les documents par leur nom r√©el, jamais par "document 1", "document 2"

ANALYSE maintenant si les documents apportent des pr√©cisions pertinentes et r√©ponds en cons√©quence."""

        try:
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(
                unified_prompt,
                generation_config={
                    "temperature": 0.1,  # Plus d√©terministe pour la v√©rification de pertinence
                    "max_output_tokens": 1200,
                }
            )
            
            annexe_response = response.text.strip()
            
            # V√©rifier seulement si la r√©ponse est vide
            if not annexe_response:
                return ""
            
            # Retourner la r√©ponse constructive avec un s√©parateur clair
            return f"\n\n**üìã PR√âCISIONS APPORT√âES PAR LES TEXTES D'APPLICATION :**\n\n{annexe_response}"
                
        except Exception as e:
            self.log_debug(f"‚ùå Erreur traitement unifi√© annexes: {str(e)}")
            return ""


    def add_annexe_to_response_excellence(self, cgi_response, annexe_results, query):
            """Ajoute les informations d'annexe en utilisant le traitement unifi√©"""
            if not annexe_results:
                return cgi_response
            
            # Utiliser le nouveau traitement unifi√© avec TOUS les r√©sultats (jusqu'√† 5)
            annexe_info = self.process_annexes_unified(query, cgi_response, annexe_results)
            
            if annexe_info:
                return cgi_response + annexe_info
            else:
                return cgi_response
        
    def _extract_annexe_info_excellence(self, query, cgi_response, payload):
        """Extraction d'excellence des informations pertinentes de l'annexe"""
        try:
            type_doc = payload.get("type", "Document")
            numero = payload.get("numero", "")
            date = payload.get("date", "")
            objet = payload.get("objet", "")
            contenu = payload.get("contenu", "")
            articles_lies = payload.get("articles_lies", [])
            
            # Formater l'en-t√™te selon le type
            doc_headers = {
                "note_circulaire": (f"**Note circulaire n¬∞ {numero}** ({date})", "üìë"),
                "d√©cret": (f"**D√©cret n¬∞ {numero}** ({date})", "üìú"),
                "note_service": (f"**Note de service** ({date})", "üìù"),
            }
            
            doc_header, doc_icon = doc_headers.get(type_doc, (f"**{type_doc.title()}**", "üìÑ"))
            
            # Si articles li√©s, les mentionner
            if articles_lies:
                doc_header += f" - Articles {', '.join(str(a) for a in articles_lies[:3])}"
            
            # Traitement sp√©cifique selon le contenu
            query_lower = query.lower()
            
            # 1. INDUSTRIE DU PLASTIQUE - EXTRACTION CIBL√âE
            if "plastique" in query_lower and (type_doc == "d√©cret" or payload.get("has_plastique")):
                # Chercher sp√©cifiquement dans la liste des activit√©s
                # D'apr√®s l'exemple, l'industrie du plastique est au point 8 ou 10
                
                # Pattern pour trouver la section des industries chimiques
                sections_patterns = [
                    r"8[-‚Äì]\s*Industrie\s+chimique(.*?)(?=\d+[-‚Äì]|$)",
                    r"10[-‚Äì]\s*Industrie\s+des\s+produits\s+en\s+caoutchouc\s+et\s+en\s+plastique(.*?)(?=\d+[-‚Äì]|$)"
                ]
                
                for pattern in sections_patterns:
                    match = re.search(pattern, contenu, re.IGNORECASE | re.DOTALL)
                    if match:
                        section_content = match.group(0)
                        # V√©rifier si l'industrie du plastique est mentionn√©e
                        if "plastique" in section_content.lower():
                            # Extraire juste cette section
                            formatted_response = f"\n{doc_icon} {doc_header}:\n"
                            formatted_response += "‚úÖ **L'industrie du plastique figure dans la liste des activit√©s industrielles exon√©r√©es**\n\n"
                            
                            # Nettoyer et formater la section
                            lines = section_content.split('\n')
                            relevant_lines = []
                            for line in lines:
                                line = line.strip()
                                if line and not line.isspace():
                                    # Ajouter un tiret si ce n'est pas un titre de section
                                    if not re.match(r'^\d+[-‚Äì]', line):
                                        line = f"‚Äì {line}"
                                    relevant_lines.append(line)
                            
                            # Afficher uniquement les lignes pertinentes
                            formatted_response += "\n".join(relevant_lines[:5])  # Limiter √† 5 lignes
                            
                            formatted_response += "\n\nüí° *Cette activit√© peut b√©n√©ficier de l'exon√©ration totale d'IS pendant les 5 premiers exercices (Article 6 II-B-4¬∞)*"
                            
                            return formatted_response
                
                # Si pas trouv√© avec les patterns de section, chercher directement
                plastic_patterns = [
                    r"[-‚Äì]\s*Industrie\s+du\s+plastique",
                    r"[-‚Äì]\s*Industrie\s+des?\s+produits\s+en\s+plastique"
                ]
                
                for pattern in plastic_patterns:
                    match = re.search(pattern, contenu, re.IGNORECASE)
                    if match:
                        formatted_response = f"\n{doc_icon} {doc_header}:\n"
                        formatted_response += "‚úÖ **L'industrie du plastique figure dans la liste des activit√©s industrielles exon√©r√©es**\n\n"
                        
                        # Extraire un contexte minimal autour
                        start = max(0, match.start() - 50)
                        end = min(len(contenu), match.end() + 100)
                        context = contenu[start:end].strip()
                        
                        # Nettoyer le contexte
                        if not context.startswith('‚Äì'):
                            context = "..." + context
                        if not context.endswith('.'):
                            context = context + "..."
                        
                        formatted_response += f"*{context}*\n\n"
                        formatted_response += "üí° *Cette activit√© peut b√©n√©ficier de l'exon√©ration totale d'IS pendant les 5 premiers exercices (Article 6 II-B-4¬∞)*"
                        
                        return formatted_response
            
            # 2. INDEMNIT√â DE REPR√âSENTATION
            elif "repr√©sentation" in query_lower and (type_doc == "note_service" or payload.get("has_representation")):
                # Chercher le plafond
                plafond_patterns = [
                    r"indemnit√©\s+de\s+repr√©sentation.*?plafonn√©e?\s*√†?\s*(\d+\s*%)",
                    r"repr√©sentation.*?(\d+\s*%)\s*du\s+salaire",
                    r"l'exon√©ration\s+est\s+plafonn√©e\s+√†\s+(\d+\s*%)"
                ]
                
                plafond = None
                for pattern in plafond_patterns:
                    match = re.search(pattern, contenu, re.IGNORECASE | re.DOTALL)
                    if match:
                        plafond = match.group(1)
                        break
                
                if plafond:
                    # Chercher les b√©n√©ficiaires
                    beneficiaires = []
                    
                    # Extraire la section sur les b√©n√©ficiaires
                    ben_match = re.search(r"b√©n√©ficiaires\s+doivent.*?:(.*?)(?:prime|indemnit√©|\Z)", contenu, re.IGNORECASE | re.DOTALL)
                    if ben_match:
                        ben_text = ben_match.group(1)
                        
                        # Parser les b√©n√©ficiaires
                        if "pr√©sident directeur g√©n√©ral" in ben_text.lower():
                            beneficiaires.append("Pr√©sident Directeur G√©n√©ral (PDG)")
                        if "directeur g√©n√©ral" in ben_text.lower():
                            beneficiaires.append("Directeur G√©n√©ral")
                        if "directeur" in ben_text.lower() and "d√©partement" in ben_text.lower():
                            beneficiaires.append("Directeurs de d√©partements (Commercial, Financier, RH, etc.)")
                        if "g√©rant" in ben_text.lower():
                            beneficiaires.append("G√©rant salari√© avec pouvoirs de direction")
                    
                    formatted_response = f"\n{doc_icon} {doc_header}:\n"
                    formatted_response += f"üìä **Plafond d'exon√©ration de l'indemnit√© de repr√©sentation : {plafond} du salaire de base**\n"
                    
                    if beneficiaires:
                        formatted_response += "\nüë• **B√©n√©ficiaires √©ligibles :**\n"
                        for ben in beneficiaires:
                            formatted_response += f"‚Ä¢ {ben}\n"
                    else:
                        formatted_response += "\n*R√©serv√©e aux cadres dirigeants disposant de pouvoirs de direction et de gestion*"
                    
                    return formatted_response
            
            # 3. APPROCHE G√âN√âRALE AM√âLIOR√âE pour les autres cas
            # Pour les autres cas, utiliser une approche plus concise
            extraction_prompt = f"""Analyse ce document fiscal et extrais UNIQUEMENT l'information essentielle qui compl√®te la r√©ponse CGI.

QUESTION: "{query}"
TYPE: {type_doc}

R√àGLES STRICTES:
1. Maximum 2-3 phrases
2. Uniquement les √©l√©ments pratiques (taux, montants, conditions)
3. Si le document cite une liste, extraire SEULEMENT l'√©l√©ment pertinent
4. NE PAS reproduire de longues sections du document

DOCUMENT (extrait):
{objet}
{contenu[:1500]}

R√©ponds "NON_PERTINENT" si aucune info utile."""

            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(
                extraction_prompt,
                generation_config={
                    "temperature": 0.1,
                    "max_output_tokens": 300,
                }
            )
            
            extracted_info = response.text.strip()
            
            if "NON_PERTINENT" in extracted_info or len(extracted_info) < 20:
                return ""
            
            return f"\n{doc_icon} {doc_header}:\n{extracted_info}"
            
        except Exception as e:
            self.log_debug(f"Erreur extraction annexe: {str(e)}")
            return ""
    
    # M√âTHODE PRINCIPALE D'EXCELLENCE
    def process_query_excellence(self, query, messages_history=None):
        """Traite une requ√™te avec excellence maximale"""
        start_time = datetime.now()
        self.clear_debug_logs()
        
        self.log_debug(f"üöÄ TRAITEMENT EXCELLENCE: '{query}'")
        
        # D√©tection d'intention
        intent = self.detect_conversation_intent(query)
        self.log_debug(f"üß† Intention: {intent}")
        
        # Traitement conversationnel
        if intent in ["greetings", "presentation_request", "help_request", "goodbye"]:
            conversational_response = self.generate_conversational_response(query, intent)
            execution_time = (datetime.now() - start_time).total_seconds()
            
            return {
                "response": conversational_response,
                "cgi_articles": 0,
                "annexe_docs": 0,
                "articles_found": [],
                "execution_time": execution_time,
                "debug_logs": self.get_debug_logs(),
                "context_used": False,
                "intent": intent,
                "search_method": "conversational"
            }
        
        # Traitement des questions fiscales
        original_query = query
        use_context = False
        
        # V√©rification du contexte
        if (self.conversation_context["waiting_for_clarification"] and 
            intent == "clarification"):
            use_context = True
            self.log_debug("üîó Utilisation du contexte de conversation")
        
        # RECHERCHE CGI EXCELLENCE
        cgi_results = self.search_cgi_articles(query, limit=8)
        
        # G√©n√©ration de la r√©ponse CGI
        cgi_response = self.generate_cgi_response_excellence(query, cgi_results, use_context=use_context)
        
        # Extraction des articles
        cgi_article_numbers = self.extract_article_numbers(cgi_results)
        query_article_numbers = self._extract_articles_from_query(original_query)
        
        # Combiner tous les articles trouv√©s
        all_article_numbers = list(set(query_article_numbers + cgi_article_numbers))[:6]
        
        # RECHERCHE ANNEXE AM√âLIOR√âE - TOUJOURS EFFECTU√âE
        annexe_results = []
        # Supprimer la condition de longueur pour toujours effectuer la recherche annexe
        annexe_results = self.search_annexe_excellence(
            all_article_numbers, original_query, cgi_response
        )
        
        # R√©ponse finale
        final_response = self.add_annexe_to_response_excellence(
            cgi_response, annexe_results, original_query
        )
        
        # Mise √† jour du contexte
        self._update_context(original_query, final_response, all_article_numbers)
        
        execution_time = (datetime.now() - start_time).total_seconds()
        
        # Pr√©parer les articles pour la base de donn√©es
        articles_info = []
        for result in cgi_results:
            article_info = {
                "article": result.payload.get("article", "N/A"),
                "nom_article": result.payload.get("nom_article", "Sans titre"),
                "tags": result.payload.get("tags", [])
            }
            articles_info.append(article_info)
        
        # Enregistrer dans la base de donn√©es
        conversation_id = None
        if self.db:
            conversation_id = self.db.save_conversation(
                question=query,
                response=final_response,
                articles=articles_info,
                search_method="excellence_hybrid",
                semantic_score=cgi_results[0].score if cgi_results else 0.0,
                query_complexity=0.5,  # Estimation simple
                execution_time=execution_time,
                model_used="gemini-2.0-flash"
            )
        
        # Statistiques d√©taill√©es
        stats = {
            "response": final_response,
            "cgi_articles": len(cgi_results),
            "annexe_docs": len(annexe_results),
            "articles_found": all_article_numbers,
            "execution_time": execution_time,
            "debug_logs": self.get_debug_logs(),
            "context_used": use_context,
            "intent": intent,
            "search_method": "excellence_hybrid",
            "collections_searched": ["main", "parent", "sections", "annexe"],
            "enrichment_used": True,
            "conversation_id": conversation_id
        }
        
        return stats


class TerritorialFiscalBot:
    """Chatbot sp√©cialis√© dans la fiscalit√© des collectivit√©s territoriales"""
    
    def __init__(self):
        self.qdrant_client = qdrant_client_main
        self.synonym_manager = synonym_manager
        self.db = db
        
        # Collections pour les collectivit√©s territoriales
        self.collections = {
            "main": "FCT",
            "annexe": "FCT_Annexes"  # Nouvelle collection pour les annexes FCT
        }
        
        # Configuration optimis√©e
        self.config = {
            "search_threshold": 0.08,
            "search_limit": 12,
            "annexe_score_threshold": 0.05,  # Seuil tr√®s bas pour capturer plus d'annexes
            "annexe_search_limit": 10       # Limite pour les annexes
        }
        
        # Logs de debug
        self.debug_logs = []
        
        # Syst√®me d'intelligence conversationnelle
        self.conversation_patterns = {
            "greetings": [
                "bonjour", "bonsoir", "salut", "hello", "hey", "coucou", "bonne journ√©e"
            ],
            "presentation_request": [
                "pr√©sente toi", "qui es tu", "que fais tu", "pr√©sentation", "qui √™tes vous"
            ],
            "help_request": [
                "aide", "help", "comment √ßa marche", "utilisation", "guide", "comment faire"
            ],
            "goodbye": [
                "au revoir", "bye", "√† bient√¥t", "merci", "bonne journ√©e", "salut"
            ]
        }
        
        # Contexte de conversation
        self.conversation_context = {
            "last_question": "",
            "last_response": "",
            "last_articles": [],
            "waiting_for_clarification": False,
            "context_articles": [],
            "context_topic": "",
            "user_name": None,
            "conversation_started": False,
            "search_history": []
        }
    
    def _clear_context(self):
        """Efface le contexte de conversation"""
        self.conversation_context = {
            "last_question": "",
            "last_response": "",
            "last_articles": [],
            "waiting_for_clarification": False,
            "context_articles": [],
            "context_topic": "",
            "user_name": self.conversation_context.get("user_name"),  # Garder le nom
            "conversation_started": False,
            "search_history": []
        }
    
    def log_debug(self, message: str):
        """Ajoute un message aux logs de debug avec timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        self.debug_logs.append(f"[{timestamp}] {message}")
    
    def clear_debug_logs(self):
        """Efface les logs de debug"""
        self.debug_logs = []
    
    def get_debug_logs(self) -> List[str]:
        """Retourne les logs de debug"""
        return self.debug_logs
    
    def detect_conversation_intent(self, query: str) -> str:
        """D√©tecte l'intention conversationnelle de l'utilisateur"""
        query_lower = query.lower().strip()
        
        # Extraction du nom si pr√©sent
        name_patterns = [
            r"je suis ([a-zA-Z√Ä-√ø\s]+)",
            r"je m'appelle ([a-zA-Z√Ä-√ø\s]+)",
            r"mon nom est ([a-zA-Z√Ä-√ø\s]+)"
        ]
        
        for pattern in name_patterns:
            match = re.search(pattern, query_lower)
            if match:
                self.conversation_context["user_name"] = match.group(1).strip().title()
        
        # V√©rifier d'abord si c'est une question fiscale territoriale
        territorial_keywords = [
            "commune", "communal", "pr√©fecture", "province", "r√©gion", "r√©gional",
            "collectivit√©", "territorial", "taxe communale", "taxe r√©gionale",
            "redevance", "contribution", "budget", "finances locales", "fiscalit√© locale",
            "imp√¥t local", "taxe locale", "b√©n√©ficiaire", "affectation", "r√©partition"
        ]
        
        if any(keyword in query_lower for keyword in territorial_keywords):
            return "fiscal_question"
        
        # Ensuite v√©rifier les intentions conversationnelles
        for intent, patterns in self.conversation_patterns.items():
            if any(pattern in query_lower for pattern in patterns):
                return intent
        
        return "general_question"
    
    def generate_conversational_response(self, query: str, intent: str) -> str:
        """G√©n√®re des r√©ponses conversationnelles intelligentes"""
        
        user_name = self.conversation_context.get("user_name", "")
        name_part = f" {user_name}" if user_name else ""
        
        if intent == "greetings":
            if not self.conversation_context["conversation_started"]:
                self.conversation_context["conversation_started"] = True
                return f"""Bonjour{name_part} ! üëã

Je suis votre **Expert en Fiscalit√© des Collectivit√©s Territoriales**, sp√©cialis√© dans les taxes et contributions des communes, pr√©fectures, provinces et r√©gions du Maroc.

üèõÔ∏è **Ma sp√©cialit√© :**
‚Ä¢ Taxes communales et leurs b√©n√©ficiaires
‚Ä¢ Imp√¥ts des pr√©fectures et provinces
‚Ä¢ Contributions r√©gionales
‚Ä¢ R√©partition et affectation des recettes fiscales
‚Ä¢ Fiscalit√© locale et territoriale

üí° **Exemples de questions :**
‚Ä¢ "Quelles taxes b√©n√©ficient aux communes ?"
‚Ä¢ "Comment sont r√©parties les recettes de la TVA ?"
‚Ä¢ "Quels imp√¥ts alimentent le budget r√©gional ?"
‚Ä¢ "Qui b√©n√©ficie de la taxe sur les v√©hicules ?"

Comment puis-je vous aider avec la fiscalit√© territoriale ?"""
            else:
                return f"Rebonjour{name_part} ! Comment puis-je vous aider avec vos questions sur la fiscalit√© des collectivit√©s territoriales ?"
        
        elif intent == "presentation_request":
            return f"""Je suis votre **Expert en Fiscalit√© des Collectivit√©s Territoriales** ! üèõÔ∏è

üìö **Ma sp√©cialit√© :**
Assistant IA sp√©cialis√© dans la fiscalit√© locale marocaine, avec une expertise approfondie sur :

üèòÔ∏è **Niveau communal :**
‚Ä¢ Taxes et redevances communales
‚Ä¢ Budget et ressources des communes
‚Ä¢ Fiscalit√© locale urbaine et rurale

üè¢ **Niveau pr√©fectoral/provincial :**
‚Ä¢ Imp√¥ts des pr√©fectures et provinces
‚Ä¢ R√©partition des recettes fiscales
‚Ä¢ Contributions territoriales

üåç **Niveau r√©gional :**
‚Ä¢ Fiscalit√© r√©gionale
‚Ä¢ Affectation des ressources aux r√©gions
‚Ä¢ D√©veloppement territorial

Que souhaitez-vous savoir sur la fiscalit√© des collectivit√©s territoriales ?"""
        
        elif intent == "help_request":
            return """üÜò **Guide d'utilisation - Expert Fiscalit√© Territoriale**

**Types de questions que je traite :**
‚Ä¢ R√©partition des taxes entre collectivit√©s
‚Ä¢ B√©n√©ficiaires des diff√©rents imp√¥ts
‚Ä¢ Budget et ressources des communes/r√©gions
‚Ä¢ Fiscalit√© locale et territoriale

**Exemples de formulations efficaces :**
‚Ä¢ "Qui b√©n√©ficie de [nom de la taxe] ?"
‚Ä¢ "Comment est r√©partie [nom de l'imp√¥t] ?"
‚Ä¢ "Quelles sont les ressources fiscales des [communes/r√©gions] ?"
‚Ä¢ "Quel pourcentage de [taxe] va aux [collectivit√©s] ?"

**Conseils pour de meilleures r√©ponses :**
‚úÖ Soyez sp√©cifique sur la collectivit√© (commune, r√©gion, etc.)
‚úÖ Mentionnez le type de taxe ou d'imp√¥t
‚úÖ Pr√©cisez si vous cherchez des pourcentages ou montants

Posez votre question sur la fiscalit√© territoriale !"""
        
        elif intent == "goodbye":
            return f"Au revoir{name_part} ! üëã N'h√©sitez pas √† revenir pour toute question sur la fiscalit√© des collectivit√©s territoriales. Bonne journ√©e !"
        
        return "Je suis l√† pour r√©pondre √† vos questions sur la fiscalit√© des collectivit√©s territoriales. Comment puis-je vous aider ?"
    
    def search_fct_documents(self, query: str, limit: int = 12):
        """Recherche dans la collection FCT"""
        try:
            # Enrichir la requ√™te avec des synonymes
            enriched_query = self.synonym_manager.expand_query(query)
            self.log_debug(f"üîç Requ√™te enrichie: {enriched_query}")
            
            # G√©n√©rer l'embedding avec Voyage
            embedding_response = voyage_client.embed(
                texts=[enriched_query],
                model="voyage-law-2"
            )
            query_vector = embedding_response.embeddings[0]
            
            # Recherche dans Qdrant
            search_results = self.qdrant_client.search(
                collection_name=self.collections["main"],
                query_vector=query_vector,
                limit=limit,
                score_threshold=self.config["search_threshold"]
            )
            
            self.log_debug(f"‚úÖ Trouv√© {len(search_results)} documents FCT")
            return search_results
            
        except Exception as e:
            self.log_debug(f"‚ùå Erreur recherche FCT: {str(e)}")
            return []
    
    def search_fct_annexes(self, query: str, limit: int = 10):
        """Recherche dans les annexes FCT (collection FCT_Annexes)"""
        try:
            # Enrichir la requ√™te avec des synonymes
            enriched_query = self.synonym_manager.expand_query(query)
            self.log_debug(f"üîç Recherche annexes FCT: {enriched_query}")
            
            # G√©n√©rer l'embedding avec Voyage
            embedding_response = voyage_client.embed(
                texts=[enriched_query],
                model="voyage-law-2"
            )
            query_vector = embedding_response.embeddings[0]
            
            # Recherche dans Qdrant
            search_results = self.qdrant_client.search(
                collection_name=self.collections["annexe"],
                query_vector=query_vector,
                limit=limit,
                score_threshold=self.config["annexe_score_threshold"]
            )
            
            self.log_debug(f"‚úÖ Trouv√© {len(search_results)} annexes FCT")
            return search_results
            
        except Exception as e:
            self.log_debug(f"‚ùå Erreur recherche annexes FCT: {str(e)}")
            return []
    
    def process_fct_annexes(self, query, fct_response, annexe_results):
        """Traite les annexes FCT et g√©n√®re une r√©ponse constructive"""
        
        if not annexe_results:
            return ""
        
        # Construire le contexte des annexes
        annexe_context = ""
        for i, result in enumerate(annexe_results):
            metadata = result.payload
            document = metadata.get("document", "Document")
            chapitre = metadata.get("chapitre", "")
            nom_chapitre = metadata.get("nom_chapitre", "")
            partie = metadata.get("partie", "")
            nom_partie = metadata.get("nom_partie", "")
            contenu = metadata.get("contenu", "")
            
            annexe_context += f"\n--- DOCUMENT {i+1} ---\n"
            annexe_context += f"Source: {document}\n"
            if chapitre:
                annexe_context += f"Chapitre: {chapitre}\n"
            if nom_chapitre:
                annexe_context += f"Nom chapitre: {nom_chapitre}\n"
            if partie:
                annexe_context += f"Partie: {partie}\n"
            if nom_partie:
                annexe_context += f"Nom partie: {nom_partie}\n"
            annexe_context += f"Contenu: {contenu}\n"
        
        # Prompt unifi√© pour traiter les annexes FCT
        unified_prompt = f"""Tu es un expert en fiscalit√© des collectivit√©s territoriales marocaines.

CONTEXTE:
L'utilisateur a pos√© une question sur la fiscalit√© territoriale et a re√ßu une r√©ponse bas√©e sur les textes principaux.
Tu dois maintenant analyser si les documents d'application (notes de service, circulaires) apportent des pr√©cisions utiles.

QUESTION UTILISATEUR: "{query}"

R√âPONSE PRINCIPALE D√âJ√Ä FOURNIE:
{fct_response}

DOCUMENTS D'APPLICATION TROUV√âS:
{annexe_context}

INSTRUCTIONS:

1. **V√âRIFICATION DE PERTINENCE** : Analyse d'abord si les documents d'application apportent des pr√©cisions utiles et pertinentes √† la question pos√©e et √† la r√©ponse principale.

2. **SI LES DOCUMENTS NE SONT PAS PERTINENTS** (hors sujet, pas de pr√©cisions utiles, informations d√©j√† couvertes) :
   - R√©ponds EXACTEMENT : "Aucune pr√©cisions √† apporter"
   - Ne g√©n√®re aucune autre r√©ponse

3. **SI LES DOCUMENTS SONT PERTINENTS** :
   - EXTRAIT les informations sp√©cifiques qui compl√®tent ou pr√©cisent la r√©ponse principale
   - G√âN√àRE une r√©ponse constructive qui EXPLIQUE concr√®tement ce qui change ou se pr√©cise
   - CITE les documents par leur nom r√©el (ex: "Note de service - Loi n¬∞ 47-06") et NON par "document 1", "document 2"
   - INT√àGRE les informations trouv√©es dans une explication fluide et pratique
   - DONNE des r√©ponses d√©finitives bas√©es sur les documents trouv√©s

STRUCTURE DE LA R√âPONSE (si pertinente):
- Identifier ce qui √©tait impr√©cis dans la r√©ponse principale
- Expliquer concr√®tement ce que les documents d'application apportent comme pr√©cisions
- Citer les documents par leur nom r√©el
- Donner la r√©ponse finale claire et pratique

TON ET STYLE:
- R√©ponse fluide et naturelle, pas de format de citation
- Explication claire de ce qui change par rapport √† la r√©ponse principale
- R√©ponse d√©finitive et pratique pour l'utilisateur
- √âviter les formules comme "il faut consulter" - donner directement la r√©ponse
- Citer les documents par leur nom r√©el, jamais par "document 1", "document 2"

ANALYSE maintenant si les documents apportent des pr√©cisions pertinentes et r√©ponds en cons√©quence."""
        
        try:
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(
                unified_prompt,
                generation_config={
                    "temperature": 0.1,
                    "max_output_tokens": 1200,
                }
            )
            
            annexe_response = response.text.strip()
            
            # V√©rifier seulement si la r√©ponse est vide
            if not annexe_response:
                return ""
            
            # Retourner la r√©ponse constructive avec un s√©parateur clair
            return f"\n\n**üìã PR√âCISIONS APPORT√âES PAR LES TEXTES D'APPLICATION :**\n\n{annexe_response}"
                
        except Exception as e:
            self.log_debug(f"‚ùå Erreur traitement annexes FCT: {str(e)}")
            return ""
    
    def add_annexe_to_fct_response(self, fct_response, annexe_results, query):
        """Ajoute les informations d'annexe FCT √† la r√©ponse principale"""
        if not annexe_results:
            return fct_response
        
        # Utiliser le traitement unifi√© avec les r√©sultats d'annexes
        annexe_info = self.process_fct_annexes(query, fct_response, annexe_results)
        
        if annexe_info:
            return fct_response + annexe_info
        else:
            return fct_response
    
    def generate_fct_response(self, query: str, fct_results, use_context=False):
        """G√©n√®re une r√©ponse bas√©e sur les documents FCT"""
        
        if not fct_results:
            return f"""‚ùå **Aucune information trouv√©e pour : "{query}"**

üîç **Optimisez votre recherche avec :**
‚Ä¢ **Termes territoriaux** : commune, pr√©fecture, province, r√©gion
‚Ä¢ **Types de taxes** : TVA, IS, IR, taxe professionnelle
‚Ä¢ **Concepts cl√©s** : b√©n√©ficiaire, r√©partition, affectation, budget
‚Ä¢ **Questions pr√©cises** : "Qui b√©n√©ficie de la TVA ?", "R√©partition IR communes"

üí° **Exemples de questions efficaces :**
‚Ä¢ "Quelles taxes alimentent le budget communal ?"
‚Ä¢ "Comment est r√©partie la TVA entre collectivit√©s ?"
‚Ä¢ "Qui b√©n√©ficie de l'imp√¥t sur les soci√©t√©s ?"
‚Ä¢ "Quel pourcentage de l'IR va aux r√©gions ?"

Je suis sp√©cialis√© dans la fiscalit√© des collectivit√©s territoriales marocaines !"""
        
        # Construire le contexte FCT
        fct_context = ""
        articles_found = set()
        
        for i, result in enumerate(fct_results):
            metadata = result.payload
            article_num = metadata.get("article", "N/A")
            article_name = metadata.get("nom_article", "Sans titre")
            content = metadata.get("contenu", "")
            partie = metadata.get("partie", "")
            titre = metadata.get("titre", "")
            chapitre = metadata.get("chapitre", "")
            section = metadata.get("section", "")
            
            fct_context += f"\n--- ARTICLE {article_num} ---\n"
            if partie:
                fct_context += f"Partie: {partie}\n"
            if titre:
                fct_context += f"Titre: {titre}\n"
            if chapitre:
                fct_context += f"Chapitre: {chapitre}\n"
            if section:
                fct_context += f"Section: {section}\n"
            fct_context += f"Article: {article_name}\n"
            fct_context += f"Contenu: {content}\n"
            
            articles_found.add(article_num)
        
        # Sauvegarder les articles trouv√©s
        self.conversation_context["last_articles"] = list(articles_found)
        
        # Prompt sp√©cialis√© pour les collectivit√©s territoriales
        if use_context and self.conversation_context["waiting_for_clarification"]:
            main_prompt = f"""Tu es un expert en fiscalit√© des collectivit√©s territoriales marocaines.

CONTEXTE DE CONVERSATION:
- Question pr√©c√©dente: {self.conversation_context['last_question']}
- Articles consult√©s: {', '.join(self.conversation_context['context_articles'])}
- Clarification demand√©e sur: {self.conversation_context.get('context_topic', 'aspect non pr√©cis√©')}

L'utilisateur apporte des pr√©cisions.

R√àGLES D'EXCELLENCE:
1. Utilise le contexte pour affiner ta r√©ponse
2. Cite TOUJOURS les articles avec leurs dispositions exactes
3. Structure ta r√©ponse de mani√®re claire et progressive
4. Anticipe les questions de suivi possibles

Question/clarification: "{query}"

Extraits des textes sur les collectivit√©s territoriales:
{fct_context}"""
        else:
            main_prompt = f"""Tu es un expert en fiscalit√© des collectivit√©s territoriales marocaines, sp√©cialis√© dans la r√©partition des taxes et imp√¥ts entre communes, pr√©fectures, provinces et r√©gions.

R√àGLES PRINCIPALES:
1. R√©ponds UNIQUEMENT en te basant sur les extraits fournis dans le contexte.
2. Ne fais JAMAIS de suppositions sur des informations non pr√©sentes dans le contexte.
3. Cite TOUJOURS les num√©ros d'articles pr√©cis sur lesquels tu t'appuies.
4. Pour ta PREMI√àRE r√©ponse seulement, commence par "Votre question porte sur [sujet fiscal territorial pr√©cis]."
5. Respecte STRICTEMENT les pourcentages et r√©partitions mentionn√©s dans les articles.
6. Si un article donne une d√©finition ou une r√©partition explicite, elle doit figurer dans ta r√©ponse.
7. Mets l'accent sur les b√©n√©ficiaires (communes, pr√©fectures, provinces, r√©gions) et les pourcentages d'affectation.
8. Si une √©num√©ration d√©passe 10 √©l√©ments, regroupe-les par type de collectivit√©.

STRUCTURE DE R√âPONSE:
- Premi√®re ligne: identification du sujet fiscal territorial (uniquement premi√®re r√©ponse)
- Corps: explication claire avec citation explicite des articles et pourcentages
- Si n√©cessaire: demande pr√©cise d'informations compl√©mentaires

N'UTILISE JAMAIS de formules comme "je ne sais pas" ou "je n'ai pas assez d'informations".
Si le contexte est insuffisant, demande des pr√©cisions cibl√©es.

L'utilisateur pose la question suivante : "{query}"

Extraits des textes sur les collectivit√©s territoriales:
{fct_context}"""
        
        try:
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(
                main_prompt,
                generation_config={
                    "temperature": 0.1,
                    "top_p": 0.95,
                    "max_output_tokens": 2500,
                }
            )
            
            return response.text
            
        except Exception as e:
            return f"‚ùå Erreur lors de la g√©n√©ration de la r√©ponse: {str(e)}"
    
    def _is_clarification_request(self, response: str) -> bool:
        """D√©tecte si la r√©ponse demande une clarification"""
        clarification_indicators = [
            "pourriez-vous pr√©ciser",
            "pouvez-vous pr√©ciser", 
            "quelle collectivit√©",
            "dans quel contexte",
            "souhaitez-vous conna√Ætre",
            "de quel type",
            "pour quelle collectivit√©"
        ]
        
        response_lower = response.lower()
        return any(indicator in response_lower for indicator in clarification_indicators)
    
    def _extract_topic_from_response(self, response: str) -> str:
        """Extrait le sujet principal de la r√©ponse pour le contexte"""
        topics = []
        
        territorial_concepts = {
            "r√©partition TVA": ["tva", "taxe sur la valeur ajout√©e", "r√©partition"],
            "budget communal": ["commune", "communal", "budget"],
            "fiscalit√© r√©gionale": ["r√©gion", "r√©gional", "fiscalit√©"],
            "taxes pr√©fectorales": ["pr√©fecture", "province", "taxes"],
            "collectivit√©s territoriales": ["collectivit√©", "territorial", "local"]
        }
        
        response_lower = response.lower()
        for concept, keywords in territorial_concepts.items():
            if any(kw in response_lower for kw in keywords):
                topics.append(concept)
        
        return topics[0] if topics else "fiscalit√© territoriale"
    
    def _update_context(self, question: str, response: str, articles: List[str]):
        """Met √† jour le contexte de conversation"""
        self.conversation_context.update({
            "last_question": question,
            "last_response": response[:500],
            "waiting_for_clarification": self._is_clarification_request(response),
            "context_articles": articles,
            "context_topic": self._extract_topic_from_response(response)
        })
        
        # Ajouter √† l'historique de recherche
        search_entry = {
            "query": question,
            "articles": articles,
            "timestamp": datetime.now()
        }
        self.conversation_context["search_history"].append(search_entry)
        
        # Garder seulement les 10 derni√®res recherches
        if len(self.conversation_context["search_history"]) > 10:
            self.conversation_context["search_history"] = self.conversation_context["search_history"][-10:]
    
    def process_query_excellence(self, query, messages_history=None):
        """Traite une requ√™te avec excellence maximale pour les collectivit√©s territoriales"""
        start_time = datetime.now()
        self.clear_debug_logs()
        
        self.log_debug(f"üöÄ TRAITEMENT FCT: '{query}'")
        
        # D√©tection d'intention
        intent = self.detect_conversation_intent(query)
        self.log_debug(f"üß† Intention: {intent}")
        
        # Traitement conversationnel
        if intent in ["greetings", "presentation_request", "help_request", "goodbye"]:
            conversational_response = self.generate_conversational_response(query, intent)
            execution_time = (datetime.now() - start_time).total_seconds()
            
            return {
                "response": conversational_response,
                "fct_articles": 0,
                "articles_found": [],
                "execution_time": execution_time,
                "debug_logs": self.get_debug_logs(),
                "context_used": False,
                "intent": intent,
                "search_method": "conversational"
            }
        
        # Traitement des questions fiscales territoriales
        original_query = query
        use_context = False
        
        # V√©rification du contexte
        if (self.conversation_context["waiting_for_clarification"] and 
            intent == "clarification"):
            use_context = True
            self.log_debug("üîó Utilisation du contexte de conversation")
        
        # RECHERCHE FCT
        fct_results = self.search_fct_documents(query, limit=12)
        
        # G√©n√©ration de la r√©ponse FCT
        fct_response = self.generate_fct_response(query, fct_results, use_context=use_context)
        
        # Extraction des articles
        articles_found = []
        for result in fct_results:
            article_num = result.payload.get("article", "N/A")
            if article_num != "N/A":
                articles_found.append(article_num)
        
        # Mise √† jour du contexte
        self._update_context(original_query, fct_response, articles_found)
        
        execution_time = (datetime.now() - start_time).total_seconds()
        
        # Pr√©parer les articles pour la base de donn√©es
        articles_info = []
        for result in fct_results:
            article_info = {
                "article": result.payload.get("article", "N/A"),
                "nom_article": result.payload.get("nom_article", "Sans titre"),
                "partie": result.payload.get("partie", ""),
                "titre": result.payload.get("titre", ""),
                "chapitre": result.payload.get("chapitre", ""),
                "section": result.payload.get("section", "")
            }
            articles_info.append(article_info)
        
        # Enregistrer dans la base de donn√©es
        conversation_id = None
        if self.db:
            conversation_id = self.db.save_conversation(
                question=query,
                response=fct_response,
                articles=articles_info,
                search_method="fct_territorial",
                semantic_score=fct_results[0].score if fct_results else 0.0,
                query_complexity=len(query.split()),
                execution_time=execution_time,
                model_used="voyage-law-2"
            )
        
        return {
            "response": fct_response,
            "fct_articles": len(fct_results),
            "articles_found": articles_found,
            "execution_time": execution_time,
            "debug_logs": self.get_debug_logs(),
            "context_used": use_context,
            "intent": intent,
            "search_method": "fct_territorial",
            "conversation_id": conversation_id
        }


# ===== FONCTIONS DU TABLEAU DE BORD SIMPLIFI√âES =====
def create_feedback_distribution_chart(db):
    """Cr√©e un graphique montrant la r√©partition des types de feedback avec pourcentages"""
    try:
        # R√©cup√©rer toutes les conversations avec leur feedback
        db.cur.execute("""
        SELECT 
            CASE 
                WHEN feedback_type IS NULL THEN 'sans_feedback'
                ELSE feedback_type
            END as feedback,
            COUNT(*) as count
        FROM conversations
        GROUP BY feedback
        """)
        
        results = db.cur.fetchall()
        
        # Cr√©er un DataFrame
        df = pd.DataFrame(results, columns=['feedback', 'count'])
        
        # Mapper pour des noms plus conviviaux
        feedback_mapping = {
            'positive': '‚úÖ Positif',
            'negative': '‚ùå N√©gatif',
            'refresh': 'üîÑ √Ä reformuler',
            'sans_feedback': '‚ö™ Sans feedback'
        }
        df['feedback_display'] = df['feedback'].map(lambda x: feedback_mapping.get(x, x))
        
        # Calculer les totaux et pourcentages
        total = df['count'].sum()
        df['percentage'] = df['count'] / total * 100
        
        # D√©finir les couleurs
        colors = {
            '‚úÖ Positif': '#28a745',
            '‚ùå N√©gatif': '#dc3545',
            'üîÑ √Ä reformuler': '#17a2b8',
            '‚ö™ Sans feedback': '#6c757d'
        }
        
        # Cr√©er un donut chart
        fig = go.Figure(data=[go.Pie(
            labels=df['feedback_display'],
            values=df['count'],
            hole=.4,  # Pour cr√©er un donut au lieu d'un pie
            marker=dict(colors=[colors.get(x, '#999999') for x in df['feedback_display']]),
            textinfo='label+percent',
            hoverinfo='label+value+percent',
            textposition='outside',
            pull=[0.05 if x != '‚ö™ Sans feedback' else 0 for x in df['feedback_display']]  # Mettre en √©vidence les feedbacks
        )])
        
        fig.update_layout(
            title="R√©partition des Types de Feedback",
            showlegend=False,
            annotations=[dict(text=f'Total: {total}', x=0.5, y=0.5, font_size=15, showarrow=False)],
            height=400
        )
        
        return fig
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation du graphique de distribution des feedbacks: {str(e)}")
        return go.Figure().update_layout(title="Erreur lors du chargement des donn√©es")


# Interface Streamlit d'Excellence
def main():
    st.title("üèÜ FISCALBOT 3.0 - Excellence Fiscale CGI")
    st.subheader("‚ú® Intelligence maximale + Recherche unifi√©e + Expertise compl√®te")
    
    # Initialiser le bot
    @st.cache_resource
    def get_fiscal_bot():
        return FiscalBotExcellence()
    def get_territorial_bot():
        return TerritorialFiscalBot()
    
    bot = get_fiscal_bot()
    territorial_bot = get_territorial_bot()
    
    # Initialiser l'historique
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {
                "role": "assistant", 
                "content": """üèÜ **Bienvenue dans FiscalBot 3.0 - Excellence !**


Comment puis-je vous apporter une assistance d'excellence ?"""
            }
        ]
    
    # Dictionnaire pour stocker les IDs de conversation
    if "conversation_ids" not in st.session_state:
        st.session_state.conversation_ids = {}
    
    # Ajouter un √©tat pour le commentaire
    if "feedback_mode" not in st.session_state:
        st.session_state.feedback_mode = None
        
    if "message_index" not in st.session_state:
        st.session_state.message_index = -1
    
    # Fonction pour activer le mode feedback
    def activate_feedback(button_type, msg_index):
        st.session_state.feedback_mode = button_type
        st.session_state.message_index = msg_index
        st.rerun()
    
    # Fonction pour enregistrer le feedback
    def save_feedback(feedback_type, feedback_comment, msg_index):
        if msg_index in st.session_state.conversation_ids:
            conversation_id = st.session_state.conversation_ids[msg_index]
            success = db.update_feedback(
                conversation_id=conversation_id,
                feedback_type=feedback_type,
                feedback_comment=feedback_comment
            )
            return success
        return False
    
    # Mode d'affichage
    app_mode = st.sidebar.radio("Mode d'affichage", ["üí¨ Assistant Fiscal", "üìä Tableau de Bord", "üèõÔ∏è Expert Fiscalit√© des collectivit√©s territoriales"])
    
    # Sidebar optimis√©e
    with st.sidebar:
        st.subheader("üîó Tableau de Bord Excellence")
        
        # Choisir le bot selon le mode
        current_bot = bot if app_mode == "üí¨ Assistant Fiscal" else territorial_bot if app_mode == "üèõÔ∏è Expert Fiscalit√© des collectivit√©s territoriales" else bot
        
        # Informations utilisateur
        if current_bot.conversation_context.get("user_name"):
            st.success(f"üë§ Utilisateur: {current_bot.conversation_context['user_name']}")
        
        # Contexte de conversation
        if current_bot.conversation_context["waiting_for_clarification"]:
            st.warning("‚è≥ Clarification attendue")
            st.write(f"**Sujet:** {current_bot.conversation_context.get('context_topic', 'Non d√©fini')}")
            
            if current_bot.conversation_context["context_articles"]:
                st.write("**Articles en contexte:**")
                st.write(", ".join(current_bot.conversation_context["context_articles"]))
        else:
            if app_mode == "üèõÔ∏è Expert Fiscalit√© des collectivit√©s territoriales":
                st.info("üèõÔ∏è Pr√™t pour vos questions territoriales")
            else:
                st.info("üí¨ Pr√™t pour toute question")
        
        # Historique de recherche
        if current_bot.conversation_context.get("search_history"):
            with st.expander("üìú Historique r√©cent", expanded=False):
                for search in current_bot.conversation_context["search_history"][-3:]:
                    st.write(f"‚Ä¢ {search['query'][:50]}...")
                    st.caption(f"Articles: {', '.join(search['articles'][:3])}")
        
        # Bouton nouvelle conversation
        if st.button("üîÑ Nouvelle Conversation"):
            if app_mode == "üèõÔ∏è Expert Fiscalit√© des collectivit√©s territoriales":
                # R√©initialiser pour le mode territorial
                if "territorial_messages" not in st.session_state:
                    st.session_state.territorial_messages = []
                st.session_state.territorial_messages = [
                    {"role": "assistant", "content": "Bonjour ! Je suis votre expert en fiscalit√© des collectivit√©s territoriales. Comment puis-je vous aider ?"}
                ]
                territorial_bot._clear_context()
            else:
                # R√©initialiser pour le mode CGI
                st.session_state.messages = [st.session_state.messages[0]]
                bot._clear_context()
            
            st.session_state.conversation_ids = {}
            st.rerun()
    
    if app_mode == "üí¨ Assistant Fiscal":
        # Zone de chat principale
        for i, message in enumerate(st.session_state.messages):
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                
                # Ajouter les boutons de feedback apr√®s chaque r√©ponse de l'assistant
                if message["role"] == "assistant" and i > 0:  # Ne pas ajouter pour le message d'accueil
                    col1, col2, col3, col4 = st.columns([1, 1, 1, 10])
                    with col1:
                        st.button("üîÑ", key=f"refresh_{i}", on_click=activate_feedback, args=("refresh", i))
                    with col2:
                        st.button("‚ùå", key=f"negative_{i}", on_click=activate_feedback, args=("negative", i))
                    with col3:
                        st.button("‚úÖ", key=f"positive_{i}", on_click=activate_feedback, args=("positive", i))
        
        # Afficher la zone de commentaire si un bouton a √©t√© cliqu√©
        if st.session_state.feedback_mode:
            button_type = st.session_state.feedback_mode
            msg_index = st.session_state.message_index
            
            feedback_titles = {
                "refresh": "üí¨ Commentaire pour reformuler la r√©ponse",
                "negative": "üí¨ Commentaire sur ce qui n'a pas fonctionn√©",
                "positive": "üí¨ Commentaire positif"
            }
            
            feedback_placeholders = {
                "refresh": "Expliquez comment vous souhaitez que la r√©ponse soit reformul√©e...",
                "negative": "Expliquez ce qui n'a pas fonctionn√© dans cette r√©ponse...",
                "positive": "Partagez ce que vous avez appr√©ci√© dans cette r√©ponse..."
            }
            
            st.subheader(feedback_titles[button_type])
            feedback = st.text_area("Votre commentaire (optionnel):", placeholder=feedback_placeholders[button_type])
            
            col1, col2 = st.columns([1, 10])
            with col1:
                if st.button("Envoyer"):
                    # Enregistrer le feedback dans la base de donn√©es
                    success = save_feedback(button_type, feedback, msg_index)
                    
                    if success:
                        st.success("‚úÖ Merci pour votre commentaire! Il a √©t√© enregistr√© avec succ√®s.")
                    else:
                        st.warning("‚ö†Ô∏è Le commentaire n'a pas pu √™tre enregistr√©. Veuillez r√©essayer.")
                    
                    # D√©sactiver le mode feedback apr√®s un court d√©lai
                    import time
                    time.sleep(1.5)  # Attendre 1.5 secondes pour que l'utilisateur puisse voir le message
                    
                    st.session_state.feedback_mode = None
                    st.session_state.message_index = -1
                    st.rerun()
            
            with col2:
                if st.button("Annuler"):
                    # D√©sactiver le mode feedback
                    st.session_state.feedback_mode = None
                    st.session_state.message_index = -1
                    st.rerun()
        
        # Zone de saisie
        if prompt := st.chat_input("üí¨ Posez votre question fiscale..."):
            # Ajouter le message utilisateur
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Traiter la question
            with st.chat_message("assistant"):
                message_placeholder = st.empty()
                
                # Message d'attente intelligent
                if len(prompt.split()) <= 3:
                    message_placeholder.markdown("üí≠ Analyse de votre message...")
                else:
                    # D√©tecter le type de recherche
                    if any(word in prompt.lower() for word in ["article", "art."]) or re.match(r'^[\d\s,-]+$', prompt):
                        message_placeholder.markdown(f"üìñ Recherche de l'article demand√©...")
                    elif any(word in prompt.lower() for word in ["v√©hicule", "voiture", "amortissement"]):
                        message_placeholder.markdown(f"üöó Recherche sur l'amortissement des v√©hicules...")
                    elif any(word in prompt.lower() for word in ["cotisation", "minimale"]):
                        message_placeholder.markdown(f"üí∞ Recherche sur la cotisation minimale...")
                    elif any(word in prompt.lower() for word in ["plastique", "industrie"]):
                        message_placeholder.markdown(f"üè≠ Recherche sur les industries et exon√©rations...")
                    elif any(word in prompt.lower() for word in ["indemnit√©", "repr√©sentation"]):
                        message_placeholder.markdown(f"üíº Recherche sur les indemnit√©s...")
                    else:
                        message_placeholder.markdown(f"üîç Recherche d'excellence dans toute la base fiscale...")
                
                with st.spinner("Traitement en cours..."):
                    result = bot.process_query_excellence(prompt, st.session_state.messages)
                
                # Afficher la r√©ponse
                response = result["response"]
                message_placeholder.markdown(response)
                
                # Ajouter au chat
                st.session_state.messages.append({"role": "assistant", "content": response})
                
                # Sauvegarder l'ID de conversation
                if result.get("conversation_id"):
                    msg_index = len(st.session_state.messages) - 1
                    st.session_state.conversation_ids[msg_index] = result["conversation_id"]
                
                # Ajouter les boutons de feedback pour cette nouvelle r√©ponse
                col1, col2, col3, col4 = st.columns([1, 1, 1, 10])
                msg_index = len(st.session_state.messages) - 1
                with col1:
                    st.button("üîÑ", key=f"refresh_{msg_index}", on_click=activate_feedback, args=("refresh", msg_index))
                with col2:
                    st.button("‚ùå", key=f"negative_{msg_index}", on_click=activate_feedback, args=("negative", msg_index))
                with col3:
                    st.button("‚úÖ", key=f"positive_{msg_index}", on_click=activate_feedback, args=("positive", msg_index))
                
                # M√©triques d√©taill√©es
                intent = result.get("intent", "unknown")
                
                if intent in ["fiscal_question", "general_question"]:
                    with st.expander("üìä Analyse d√©taill√©e de la recherche", expanded=False):
                        # Premi√®re ligne de m√©triques
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("Articles CGI", result["cgi_articles"])
                        
                        with col2:
                            if "annexe_docs" in result:
                                st.metric("Documents annexe", result["annexe_docs"])
                            else:
                                st.metric("Annexes FCT", result.get("fct_annexes", 0))
                        
                        with col3:
                            st.metric("Temps", f"{result['execution_time']:.2f}s")
                        
                        with col4:
                            st.metric("Articles trouv√©s", len(result["articles_found"]))
                        
                        # Deuxi√®me ligne - Performance
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric("Recherche", "Hybride")
                        
                        with col2:
                            context_text = "Avec contexte" if result.get("context_used") else "Sans contexte"
                            st.metric("Mode", context_text)
                        
                        with col3:
                            collections = len(result.get("collections_searched", []))
                            st.metric("Collections", collections)
                        
                        # Informations d√©taill√©es
                        st.success(f"üèÜ M√©thode: {result.get('search_method', 'standard')}")
                        
                        if result.get("enrichment_used"):
                            st.info("‚úÖ Enrichissement par synonymes actif")
                        
                        if result["articles_found"]:
                            st.write("**Articles consult√©s:**")
                            articles_display = ", ".join(result["articles_found"][:10])
                            if len(result["articles_found"]) > 10:
                                articles_display += f" (+{len(result['articles_found'])-10} autres)"
                            st.write(articles_display)
                        
                        # Collections recherch√©es
                        if result.get("collections_searched"):
                            st.write("**Collections analys√©es:**")
                            st.write(" ‚Ä¢ ".join(result["collections_searched"]))
                        
                        # Logs techniques (optionnel)
                        if st.checkbox("üîß Logs techniques d√©taill√©s", key=f"debug_{len(st.session_state.messages)}"):
                            st.write("**Logs de recherche:**")
                            for log in result["debug_logs"][-20:]:  # Derniers 20 logs
                                if "‚úÖ" in log:
                                    st.success(log)
                                elif "‚ùå" in log:
                                    st.error(log)
                                elif "üîÑ" in log:
                                    st.info(log)
                                else:
                                    st.text(log)
                
                elif intent in ["greetings", "presentation_request", "help_request"]:
                    with st.expander("‚ÑπÔ∏è Interaction conversationnelle", expanded=False):
                        st.success(f"Type: {intent}")
                        st.info(f"M√©thode: {result.get('search_method')}")
                        st.info(f"Temps: {result['execution_time']:.3f}s")
                        
                        # Afficher les capacit√©s du syst√®me
                        st.write("**Capacit√©s actives:**")
                        st.write("‚Ä¢ Recherche unifi√©e CGI + Annexes")
                        st.write("‚Ä¢ Enrichissement par synonymes")
                        st.write("‚Ä¢ D√©tection de contexte avanc√©e")
                        st.write("‚Ä¢ Z√©ro r√©p√©tition garantie")
                        st.write("‚Ä¢ Support des articles complexes (10-III)")
                        st.write("‚Ä¢ Collection annexe optimis√©e")
    
    elif app_mode == "üìä Tableau de Bord":
        st.title("üìä FISCALBOT - Tableau de Bord")
        st.subheader("Analyse des Donn√©es et Statistiques")
        
        # R√©cup√©rer les donn√©es
        feedback_stats = db.get_feedback_stats()
        
        # Calculer les KPIs
        if feedback_stats:
            total_conversations = sum(count for _, count in feedback_stats)
            positive_count = next((count for type, count in feedback_stats if type == 'positive'), 0)
            negative_count = next((count for type, count in feedback_stats if type == 'negative'), 0)
            refresh_count = next((count for type, count in feedback_stats if type == 'refresh'), 0)
        else:
            total_conversations = 0
            positive_count = 0
            negative_count = 0
            refresh_count = 0
        
        # Afficher les KPIs dans des colonnes
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(label="Total des Conversations", value=total_conversations)
        
        with col2:
            positive_percent = (positive_count / total_conversations * 100) if total_conversations > 0 else 0
            st.metric(label="‚úÖ Feedbacks Positifs", value=f"{positive_count} ({positive_percent:.1f}%)")
        
        with col3:
            negative_percent = (negative_count / total_conversations * 100) if total_conversations > 0 else 0
            st.metric(label="‚ùå Feedbacks N√©gatifs", value=f"{negative_count} ({negative_percent:.1f}%)")
        
        with col4:
            refresh_percent = (refresh_count / total_conversations * 100) if total_conversations > 0 else 0
            st.metric(label="üîÑ √Ä Reformuler", value=f"{refresh_count} ({refresh_percent:.1f}%)")
        
        # Graphique de distribution des feedbacks
        st.subheader("üìä R√©partition des Feedbacks")
        
        if feedback_stats:
            feedback_fig = create_feedback_distribution_chart(db)
            st.plotly_chart(feedback_fig, use_container_width=True)
        else:
            st.info("Aucune donn√©e de feedback disponible.")
        
        # Historique des conversations
        st.subheader("üí¨ Historique Complet des Conversations")
        
        # Ajouter un filtre pour le type de feedback
        col1, col2 = st.columns([1, 2])
        
        with col1:
            feedback_filter = st.selectbox(
                "Filtrer par type de feedback :",
                ["Tous", "‚úÖ Positif", "‚ùå N√©gatif", "üîÑ √Ä reformuler", "‚ö™ Sans feedback"],
                key="history_feedback_filter"
            )
        
        # Nombre initial de conversations √† afficher
        if "history_limit" not in st.session_state:
            st.session_state.history_limit = 10
        
        # Mapper la s√©lection aux valeurs de la base de donn√©es
        feedback_map = {
            "‚úÖ Positif": "positive",
            "‚ùå N√©gatif": "negative", 
            "üîÑ √Ä reformuler": "refresh",
            "‚ö™ Sans feedback": None,
            "Tous": "all"
        }
        
        reverse_feedback_map = {
            "positive": "‚úÖ Positif",
            "negative": "‚ùå N√©gatif",
            "refresh": "üîÑ √Ä reformuler",
            None: "‚ö™ Sans feedback"
        }
        
        selected_feedback = feedback_map[feedback_filter]
        
        # R√©cup√©rer les conversations avec le filtre s√©lectionn√©
        filtered_history = db.get_conversation_history(
            feedback_type=selected_feedback, 
            limit=st.session_state.history_limit
        )
        
        if filtered_history:
            # Afficher un compteur du nombre de conversations
            st.write(f"**Affichage de {len(filtered_history)} conversation(s)**")
            
            # Afficher les conversations dans des expanders
            for i, (conv_id, question, response, feedback_type, feedback_comment, timestamp) in enumerate(filtered_history):
                # Formater l'horodatage
                formatted_time = timestamp.strftime("%d/%m/%Y √† %H:%M")
                
                # D√©terminer l'ic√¥ne de feedback
                feedback_icon = "‚ö™"
                if feedback_type == 'positive':
                    feedback_icon = "‚úÖ"
                elif feedback_type == 'negative':
                    feedback_icon = "‚ùå"
                elif feedback_type == 'refresh':
                    feedback_icon = "üîÑ"
                
                # Cr√©er un expander pour chaque conversation
                with st.expander(f"{feedback_icon} Conversation #{conv_id} - {formatted_time}"):
                    st.markdown("**Question:**")
                    st.markdown(question)
                    
                    st.markdown("**R√©ponse:**")
                    st.markdown(response)
                    
                    if feedback_comment:
                        st.markdown("**Commentaire:**")
                        st.markdown(f"_{feedback_comment}_")
                    
                    # Section actions administrateur
                    st.markdown("---")
                    st.markdown("### ‚öôÔ∏è Actions administrateur")
                    
                    # Utiliser des colonnes pour structurer les actions
                    update_col1, update_col2 = st.columns(2)
                    
                    with update_col1:
                        # D√©terminer l'option actuelle 
                        current_feedback_option = reverse_feedback_map.get(feedback_type, "‚ö™ Sans feedback")
                        
                        # Fixer l'index correct
                        options = ["‚úÖ Positif", "‚ùå N√©gatif", "üîÑ √Ä reformuler", "‚ö™ Sans feedback"]
                        default_index = options.index(current_feedback_option) if current_feedback_option in options else 3  # Default to "Sans feedback"
                        
                        new_feedback = st.selectbox(
                            "Modifier le feedback:",
                            options,
                            index=default_index,
                            key=f"update_feedback_{conv_id}"
                        )
                    
                    with update_col2:
                        new_comment = st.text_area(
                            "Modifier le commentaire:",
                            value=feedback_comment if feedback_comment else "",
                            key=f"update_comment_{conv_id}"
                        )
                    
                    if st.button("Mettre √† jour", key=f"update_button_{conv_id}"):
                        # Mettre √† jour le feedback dans la base de donn√©es
                        updated_type = feedback_map[new_feedback]
                        success = db.update_feedback(conv_id, updated_type, new_comment)
                        if success:
                            st.success("Feedback mis √† jour avec succ√®s!")
                            st.rerun()
                        else:
                            st.error("Erreur lors de la mise √† jour du feedback.")
            
            # Ajouter un bouton "Charger plus"
            if len(filtered_history) == st.session_state.history_limit:
                if st.button("Charger plus de conversations"):
                    st.session_state.history_limit += 10
                    st.rerun()
        else:
            st.info(f"Aucune conversation {feedback_filter.lower()} disponible dans l'historique.")
    
    elif app_mode == "üèõÔ∏è Expert Fiscalit√© des collectivit√©s territoriales":
        st.title("üèõÔ∏è Expert Fiscalit√© des collectivit√©s territoriales")
        st.subheader("Assistant sp√©cialis√© pour les communes, pr√©fectures et r√©gions")
        
        # Initialiser les messages pour cet onglet si n√©cessaire
        if "territorial_messages" not in st.session_state:
            st.session_state.territorial_messages = [
                {"role": "assistant", "content": """üèõÔ∏è **Bienvenue dans l'Expert Fiscalit√© des Collectivit√©s Territoriales !**

Je suis sp√©cialis√© dans la fiscalit√© locale marocaine :
‚Ä¢ Taxes et contributions communales
‚Ä¢ Imp√¥ts des pr√©fectures et provinces
‚Ä¢ Fiscalit√© r√©gionale
‚Ä¢ R√©partition des recettes fiscales

Comment puis-je vous aider avec la fiscalit√© territoriale ?"""}
            ]
        
        # Dictionnaire pour stocker les IDs de conversation territoriales
        if "territorial_conversation_ids" not in st.session_state:
            st.session_state.territorial_conversation_ids = {}
        
        # Ajouter un √©tat pour le feedback territorial
        if "territorial_feedback_mode" not in st.session_state:
            st.session_state.territorial_feedback_mode = None
            
        if "territorial_message_index" not in st.session_state:
            st.session_state.territorial_message_index = -1
        
        # Fonction pour activer le mode feedback territorial
        def activate_territorial_feedback(button_type, msg_index):
            st.session_state.territorial_feedback_mode = button_type
            st.session_state.territorial_message_index = msg_index
            st.rerun()
        
        # Fonction pour enregistrer le feedback territorial
        def save_territorial_feedback(feedback_type, feedback_comment, msg_index):
            if msg_index in st.session_state.territorial_conversation_ids:
                conversation_id = st.session_state.territorial_conversation_ids[msg_index]
                success = db.update_feedback(
                    conversation_id=conversation_id,
                    feedback_type=feedback_type,
                    feedback_comment=feedback_comment
                )
                return success
            return False
        
        # Zone de chat principale
        for i, message in enumerate(st.session_state.territorial_messages):
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                
                # Ajouter les boutons de feedback apr√®s chaque r√©ponse de l'assistant
                if message["role"] == "assistant" and i > 0:  # Ne pas ajouter pour le message d'accueil
                    col1, col2, col3, col4 = st.columns([1, 1, 1, 10])
                    with col1:
                        st.button("üîÑ", key=f"territorial_refresh_{i}", on_click=activate_territorial_feedback, args=("refresh", i))
                    with col2:
                        st.button("‚ùå", key=f"territorial_negative_{i}", on_click=activate_territorial_feedback, args=("negative", i))
                    with col3:
                        st.button("‚úÖ", key=f"territorial_positive_{i}", on_click=activate_territorial_feedback, args=("positive", i))
        
        # Afficher la zone de commentaire si un bouton a √©t√© cliqu√©
        if st.session_state.territorial_feedback_mode:
            button_type = st.session_state.territorial_feedback_mode
            msg_index = st.session_state.territorial_message_index
            
            feedback_titles = {
                "refresh": "üí¨ Commentaire pour reformuler la r√©ponse",
                "negative": "üí¨ Commentaire sur ce qui n'a pas fonctionn√©",
                "positive": "üí¨ Commentaire positif"
            }
            
            feedback_placeholders = {
                "refresh": "Expliquez comment vous souhaitez que la r√©ponse soit reformul√©e...",
                "negative": "Expliquez ce qui n'a pas fonctionn√© dans cette r√©ponse...",
                "positive": "Partagez ce que vous avez appr√©ci√© dans cette r√©ponse..."
            }
            
            st.subheader(feedback_titles[button_type])
            feedback = st.text_area("Votre commentaire (optionnel):", placeholder=feedback_placeholders[button_type], key="territorial_feedback_text")
            
            col1, col2 = st.columns([1, 10])
            with col1:
                if st.button("Envoyer", key="territorial_send_feedback"):
                    # Enregistrer le feedback dans la base de donn√©es
                    success = save_territorial_feedback(button_type, feedback, msg_index)
                    
                    if success:
                        st.success("‚úÖ Merci pour votre commentaire! Il a √©t√© enregistr√© avec succ√®s.")
                    else:
                        st.warning("‚ö†Ô∏è Le commentaire n'a pas pu √™tre enregistr√©. Veuillez r√©essayer.")
                    
                    # D√©sactiver le mode feedback apr√®s un court d√©lai
                    import time
                    time.sleep(1.5)  # Attendre 1.5 secondes pour que l'utilisateur puisse voir le message
                    
                    st.session_state.territorial_feedback_mode = None
                    st.session_state.territorial_message_index = -1
                    st.rerun()
            
            with col2:
                if st.button("Annuler", key="territorial_cancel_feedback"):
                    # D√©sactiver le mode feedback
                    st.session_state.territorial_feedback_mode = None
                    st.session_state.territorial_message_index = -1
                    st.rerun()
        
        # Zone de saisie
        if prompt := st.chat_input("üí¨ Posez votre question sur la fiscalit√© territoriale..."):
            # Ajouter le message utilisateur
            st.session_state.territorial_messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Traiter la question
            with st.chat_message("assistant"):
                message_placeholder = st.empty()
                
                # Message d'attente intelligent
                if any(word in prompt.lower() for word in ["commune", "communal", "municipal"]):
                    message_placeholder.markdown(f"üèòÔ∏è Recherche sur la fiscalit√© communale...")
                elif any(word in prompt.lower() for word in ["r√©gion", "r√©gional"]):
                    message_placeholder.markdown(f"üåç Recherche sur la fiscalit√© r√©gionale...")
                elif any(word in prompt.lower() for word in ["pr√©fecture", "province"]):
                    message_placeholder.markdown(f"üè¢ Recherche sur la fiscalit√© pr√©fectorale/provinciale...")
                elif any(word in prompt.lower() for word in ["r√©partition", "b√©n√©ficiaire"]):
                    message_placeholder.markdown(f"üìä Recherche sur la r√©partition des taxes...")
                else:
                    message_placeholder.markdown(f"üîç Recherche dans la fiscalit√© territoriale...")
                
                with st.spinner("Traitement en cours..."):
                    result = territorial_bot.process_query_excellence(prompt, st.session_state.territorial_messages)
                
                # Afficher la r√©ponse
                response = result["response"]
                message_placeholder.markdown(response)
                
                # Ajouter au chat
                st.session_state.territorial_messages.append({"role": "assistant", "content": response})
                
                # Sauvegarder l'ID de conversation
                if result.get("conversation_id"):
                    msg_index = len(st.session_state.territorial_messages) - 1
                    st.session_state.territorial_conversation_ids[msg_index] = result["conversation_id"]
                
                # Ajouter les boutons de feedback pour cette nouvelle r√©ponse
                col1, col2, col3, col4 = st.columns([1, 1, 1, 10])
                msg_index = len(st.session_state.territorial_messages) - 1
                with col1:
                    st.button("üîÑ", key=f"territorial_refresh_{msg_index}", on_click=activate_territorial_feedback, args=("refresh", msg_index))
                with col2:
                    st.button("‚ùå", key=f"territorial_negative_{msg_index}", on_click=activate_territorial_feedback, args=("negative", msg_index))
                with col3:
                    st.button("‚úÖ", key=f"territorial_positive_{msg_index}", on_click=activate_territorial_feedback, args=("positive", msg_index))
                
                # M√©triques d√©taill√©es
                intent = result.get("intent", "unknown")
                
                if intent in ["fiscal_question", "general_question"]:
                    with st.expander("üìä Analyse d√©taill√©e de la recherche territoriale", expanded=False):
                        # Premi√®re ligne de m√©triques
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("Articles FCT", result["fct_articles"])
                        
                        with col2:
                            st.metric("Temps", f"{result['execution_time']:.2f}s")
                        
                        with col3:
                            st.metric("Articles trouv√©s", len(result["articles_found"]))
                        
                        with col4:
                            context_text = "Avec contexte" if result.get("context_used") else "Sans contexte"
                            st.metric("Mode", context_text)
                        
                        # Informations d√©taill√©es
                        st.success(f"üèõÔ∏è M√©thode: {result.get('search_method', 'fct_territorial')}")
                        
                        if result["articles_found"]:
                            st.write("**Articles consult√©s:**")
                            articles_display = ", ".join(result["articles_found"][:10])
                            if len(result["articles_found"]) > 10:
                                articles_display += f" (+{len(result['articles_found'])-10} autres)"
                            st.write(articles_display)
                        
                        # Logs techniques (optionnel)
                        if st.checkbox("üîß Logs techniques d√©taill√©s", key=f"territorial_debug_{len(st.session_state.territorial_messages)}"):
                            st.write("**Logs de recherche:**")
                            for log in result["debug_logs"][-20:]:  # Derniers 20 logs
                                if "‚úÖ" in log:
                                    st.success(log)
                                elif "‚ùå" in log:
                                    st.error(log)
                                elif "üîÑ" in log:
                                    st.info(log)
                                else:
                                    st.text(log)
                
                elif intent in ["greetings", "presentation_request", "help_request"]:
                    with st.expander("‚ÑπÔ∏è Interaction conversationnelle territoriale", expanded=False):
                        st.success(f"Type: {intent}")
                        st.info(f"M√©thode: {result.get('search_method')}")
                        st.info(f"Temps: {result['execution_time']:.3f}s")
                        
                        # Afficher les capacit√©s du syst√®me territorial
                        st.write("**Capacit√©s actives:**")
                        st.write("‚Ä¢ Recherche dans la collection FCT")
                        st.write("‚Ä¢ Enrichissement par synonymes territoriaux")
                        st.write("‚Ä¢ D√©tection de contexte territorial")
                        st.write("‚Ä¢ Sp√©cialisation communes/pr√©fectures/r√©gions")
                        st.write("‚Ä¢ Analyse des r√©partitions fiscales")

if __name__ == "__main__":
    main()